"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackInstanceStatus = exports.StackInstanceDetailedStatus = exports.ResourceStatus = exports.HookStatus = exports.StackDriftStatus = exports.StackDriftDetectionStatus = exports.PublisherStatus = exports.IdentityProvider = exports.RegistryType = exports.StackSetNotEmptyException = exports.InvalidChangeSetStatusException = exports.NameAlreadyExistsException = exports.PermissionModels = exports.CreatedButModifiedException = exports.StaleRequestException = exports.StackSetNotFoundException = exports.OperationInProgressException = exports.OperationIdAlreadyExistsException = exports.InvalidOperationException = exports.RegionConcurrencyType = exports.OnFailure = exports.LimitExceededException = exports.InsufficientCapabilitiesException = exports.ChangeSetType = exports.ExecutionStatus = exports.ChangeSetStatus = exports.ChangeSetNotFoundException = exports.ChangeSetHooksStatus = exports.HookTargetType = exports.HookInvocationPoint = exports.HookFailureMode = exports.ChangeType = exports.Replacement = exports.RequiresRecreation = exports.ResourceAttribute = exports.EvaluationType = exports.ChangeSource = exports.ChangeAction = exports.Category = exports.Capability = exports.TokenAlreadyExistsException = exports.CallAs = exports.TypeConfigurationNotFoundException = exports.AlreadyExistsException = exports.TypeNotFoundException = exports.CFNRegistryException = exports.VersionBump = exports.ThirdPartyType = exports.AccountGateStatus = exports.AccountFilterType = void 0;
exports.ResourceSignalStatus = exports.HandlerErrorCode = exports.OperationStatus = exports.OperationStatusCheckFailedException = exports.InvalidStateTransitionException = exports.StackSetOperationResultStatus = exports.OperationResultFilterName = exports.StackInstanceFilterName = exports.StackNotFoundException = exports.TemplateStage = exports.RegistrationStatus = exports.Visibility = exports.TypeTestsStatus = exports.ProvisioningType = exports.DeprecatedStatus = exports.OperationNotFoundException = exports.StackSetOperationStatus = exports.StackSetOperationAction = exports.StackSetStatus = exports.StackSetDriftStatus = exports.StackSetDriftDetectionStatus = exports.StackStatus = exports.DifferenceType = exports.StackResourceDriftStatus = exports.StackInstanceNotFoundException = void 0;
const CloudFormationServiceException_1 = require("./CloudFormationServiceException");
var AccountFilterType;
(function (AccountFilterType) {
    AccountFilterType["DIFFERENCE"] = "DIFFERENCE";
    AccountFilterType["INTERSECTION"] = "INTERSECTION";
    AccountFilterType["NONE"] = "NONE";
    AccountFilterType["UNION"] = "UNION";
})(AccountFilterType = exports.AccountFilterType || (exports.AccountFilterType = {}));
var AccountGateStatus;
(function (AccountGateStatus) {
    AccountGateStatus["FAILED"] = "FAILED";
    AccountGateStatus["SKIPPED"] = "SKIPPED";
    AccountGateStatus["SUCCEEDED"] = "SUCCEEDED";
})(AccountGateStatus = exports.AccountGateStatus || (exports.AccountGateStatus = {}));
var ThirdPartyType;
(function (ThirdPartyType) {
    ThirdPartyType["HOOK"] = "HOOK";
    ThirdPartyType["MODULE"] = "MODULE";
    ThirdPartyType["RESOURCE"] = "RESOURCE";
})(ThirdPartyType = exports.ThirdPartyType || (exports.ThirdPartyType = {}));
var VersionBump;
(function (VersionBump) {
    VersionBump["MAJOR"] = "MAJOR";
    VersionBump["MINOR"] = "MINOR";
})(VersionBump = exports.VersionBump || (exports.VersionBump = {}));
class CFNRegistryException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "CFNRegistryException",
            $fault: "client",
            ...opts,
        });
        this.name = "CFNRegistryException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CFNRegistryException.prototype);
        this.Message = opts.Message;
    }
}
exports.CFNRegistryException = CFNRegistryException;
class TypeNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "TypeNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TypeNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TypeNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.TypeNotFoundException = TypeNotFoundException;
class AlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "AlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "AlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.AlreadyExistsException = AlreadyExistsException;
class TypeConfigurationNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "TypeConfigurationNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "TypeConfigurationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TypeConfigurationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.TypeConfigurationNotFoundException = TypeConfigurationNotFoundException;
var CallAs;
(function (CallAs) {
    CallAs["DELEGATED_ADMIN"] = "DELEGATED_ADMIN";
    CallAs["SELF"] = "SELF";
})(CallAs = exports.CallAs || (exports.CallAs = {}));
class TokenAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "TokenAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "TokenAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TokenAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.TokenAlreadyExistsException = TokenAlreadyExistsException;
var Capability;
(function (Capability) {
    Capability["CAPABILITY_AUTO_EXPAND"] = "CAPABILITY_AUTO_EXPAND";
    Capability["CAPABILITY_IAM"] = "CAPABILITY_IAM";
    Capability["CAPABILITY_NAMED_IAM"] = "CAPABILITY_NAMED_IAM";
})(Capability = exports.Capability || (exports.Capability = {}));
var Category;
(function (Category) {
    Category["ACTIVATED"] = "ACTIVATED";
    Category["AWS_TYPES"] = "AWS_TYPES";
    Category["REGISTERED"] = "REGISTERED";
    Category["THIRD_PARTY"] = "THIRD_PARTY";
})(Category = exports.Category || (exports.Category = {}));
var ChangeAction;
(function (ChangeAction) {
    ChangeAction["Add"] = "Add";
    ChangeAction["Dynamic"] = "Dynamic";
    ChangeAction["Import"] = "Import";
    ChangeAction["Modify"] = "Modify";
    ChangeAction["Remove"] = "Remove";
})(ChangeAction = exports.ChangeAction || (exports.ChangeAction = {}));
var ChangeSource;
(function (ChangeSource) {
    ChangeSource["Automatic"] = "Automatic";
    ChangeSource["DirectModification"] = "DirectModification";
    ChangeSource["ParameterReference"] = "ParameterReference";
    ChangeSource["ResourceAttribute"] = "ResourceAttribute";
    ChangeSource["ResourceReference"] = "ResourceReference";
})(ChangeSource = exports.ChangeSource || (exports.ChangeSource = {}));
var EvaluationType;
(function (EvaluationType) {
    EvaluationType["Dynamic"] = "Dynamic";
    EvaluationType["Static"] = "Static";
})(EvaluationType = exports.EvaluationType || (exports.EvaluationType = {}));
var ResourceAttribute;
(function (ResourceAttribute) {
    ResourceAttribute["CreationPolicy"] = "CreationPolicy";
    ResourceAttribute["DeletionPolicy"] = "DeletionPolicy";
    ResourceAttribute["Metadata"] = "Metadata";
    ResourceAttribute["Properties"] = "Properties";
    ResourceAttribute["Tags"] = "Tags";
    ResourceAttribute["UpdatePolicy"] = "UpdatePolicy";
})(ResourceAttribute = exports.ResourceAttribute || (exports.ResourceAttribute = {}));
var RequiresRecreation;
(function (RequiresRecreation) {
    RequiresRecreation["Always"] = "Always";
    RequiresRecreation["Conditionally"] = "Conditionally";
    RequiresRecreation["Never"] = "Never";
})(RequiresRecreation = exports.RequiresRecreation || (exports.RequiresRecreation = {}));
var Replacement;
(function (Replacement) {
    Replacement["Conditional"] = "Conditional";
    Replacement["False"] = "False";
    Replacement["True"] = "True";
})(Replacement = exports.Replacement || (exports.Replacement = {}));
var ChangeType;
(function (ChangeType) {
    ChangeType["Resource"] = "Resource";
})(ChangeType = exports.ChangeType || (exports.ChangeType = {}));
var HookFailureMode;
(function (HookFailureMode) {
    HookFailureMode["FAIL"] = "FAIL";
    HookFailureMode["WARN"] = "WARN";
})(HookFailureMode = exports.HookFailureMode || (exports.HookFailureMode = {}));
var HookInvocationPoint;
(function (HookInvocationPoint) {
    HookInvocationPoint["PRE_PROVISION"] = "PRE_PROVISION";
})(HookInvocationPoint = exports.HookInvocationPoint || (exports.HookInvocationPoint = {}));
var HookTargetType;
(function (HookTargetType) {
    HookTargetType["RESOURCE"] = "RESOURCE";
})(HookTargetType = exports.HookTargetType || (exports.HookTargetType = {}));
var ChangeSetHooksStatus;
(function (ChangeSetHooksStatus) {
    ChangeSetHooksStatus["PLANNED"] = "PLANNED";
    ChangeSetHooksStatus["PLANNING"] = "PLANNING";
    ChangeSetHooksStatus["UNAVAILABLE"] = "UNAVAILABLE";
})(ChangeSetHooksStatus = exports.ChangeSetHooksStatus || (exports.ChangeSetHooksStatus = {}));
class ChangeSetNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "ChangeSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ChangeSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ChangeSetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ChangeSetNotFoundException = ChangeSetNotFoundException;
var ChangeSetStatus;
(function (ChangeSetStatus) {
    ChangeSetStatus["CREATE_COMPLETE"] = "CREATE_COMPLETE";
    ChangeSetStatus["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
    ChangeSetStatus["CREATE_PENDING"] = "CREATE_PENDING";
    ChangeSetStatus["DELETE_COMPLETE"] = "DELETE_COMPLETE";
    ChangeSetStatus["DELETE_FAILED"] = "DELETE_FAILED";
    ChangeSetStatus["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
    ChangeSetStatus["DELETE_PENDING"] = "DELETE_PENDING";
    ChangeSetStatus["FAILED"] = "FAILED";
})(ChangeSetStatus = exports.ChangeSetStatus || (exports.ChangeSetStatus = {}));
var ExecutionStatus;
(function (ExecutionStatus) {
    ExecutionStatus["AVAILABLE"] = "AVAILABLE";
    ExecutionStatus["EXECUTE_COMPLETE"] = "EXECUTE_COMPLETE";
    ExecutionStatus["EXECUTE_FAILED"] = "EXECUTE_FAILED";
    ExecutionStatus["EXECUTE_IN_PROGRESS"] = "EXECUTE_IN_PROGRESS";
    ExecutionStatus["OBSOLETE"] = "OBSOLETE";
    ExecutionStatus["UNAVAILABLE"] = "UNAVAILABLE";
})(ExecutionStatus = exports.ExecutionStatus || (exports.ExecutionStatus = {}));
var ChangeSetType;
(function (ChangeSetType) {
    ChangeSetType["CREATE"] = "CREATE";
    ChangeSetType["IMPORT"] = "IMPORT";
    ChangeSetType["UPDATE"] = "UPDATE";
})(ChangeSetType = exports.ChangeSetType || (exports.ChangeSetType = {}));
class InsufficientCapabilitiesException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "InsufficientCapabilitiesException",
            $fault: "client",
            ...opts,
        });
        this.name = "InsufficientCapabilitiesException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InsufficientCapabilitiesException.prototype);
        this.Message = opts.Message;
    }
}
exports.InsufficientCapabilitiesException = InsufficientCapabilitiesException;
class LimitExceededException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.LimitExceededException = LimitExceededException;
var OnFailure;
(function (OnFailure) {
    OnFailure["DELETE"] = "DELETE";
    OnFailure["DO_NOTHING"] = "DO_NOTHING";
    OnFailure["ROLLBACK"] = "ROLLBACK";
})(OnFailure = exports.OnFailure || (exports.OnFailure = {}));
var RegionConcurrencyType;
(function (RegionConcurrencyType) {
    RegionConcurrencyType["PARALLEL"] = "PARALLEL";
    RegionConcurrencyType["SEQUENTIAL"] = "SEQUENTIAL";
})(RegionConcurrencyType = exports.RegionConcurrencyType || (exports.RegionConcurrencyType = {}));
class InvalidOperationException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "InvalidOperationException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidOperationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidOperationException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidOperationException = InvalidOperationException;
class OperationIdAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "OperationIdAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationIdAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationIdAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationIdAlreadyExistsException = OperationIdAlreadyExistsException;
class OperationInProgressException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "OperationInProgressException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationInProgressException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationInProgressException = OperationInProgressException;
class StackSetNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "StackSetNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "StackSetNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StackSetNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.StackSetNotFoundException = StackSetNotFoundException;
class StaleRequestException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "StaleRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "StaleRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StaleRequestException.prototype);
        this.Message = opts.Message;
    }
}
exports.StaleRequestException = StaleRequestException;
class CreatedButModifiedException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "CreatedButModifiedException",
            $fault: "client",
            ...opts,
        });
        this.name = "CreatedButModifiedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, CreatedButModifiedException.prototype);
        this.Message = opts.Message;
    }
}
exports.CreatedButModifiedException = CreatedButModifiedException;
var PermissionModels;
(function (PermissionModels) {
    PermissionModels["SELF_MANAGED"] = "SELF_MANAGED";
    PermissionModels["SERVICE_MANAGED"] = "SERVICE_MANAGED";
})(PermissionModels = exports.PermissionModels || (exports.PermissionModels = {}));
class NameAlreadyExistsException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "NameAlreadyExistsException",
            $fault: "client",
            ...opts,
        });
        this.name = "NameAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NameAlreadyExistsException.prototype);
        this.Message = opts.Message;
    }
}
exports.NameAlreadyExistsException = NameAlreadyExistsException;
class InvalidChangeSetStatusException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "InvalidChangeSetStatusException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidChangeSetStatusException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidChangeSetStatusException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidChangeSetStatusException = InvalidChangeSetStatusException;
class StackSetNotEmptyException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "StackSetNotEmptyException",
            $fault: "client",
            ...opts,
        });
        this.name = "StackSetNotEmptyException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StackSetNotEmptyException.prototype);
        this.Message = opts.Message;
    }
}
exports.StackSetNotEmptyException = StackSetNotEmptyException;
var RegistryType;
(function (RegistryType) {
    RegistryType["HOOK"] = "HOOK";
    RegistryType["MODULE"] = "MODULE";
    RegistryType["RESOURCE"] = "RESOURCE";
})(RegistryType = exports.RegistryType || (exports.RegistryType = {}));
var IdentityProvider;
(function (IdentityProvider) {
    IdentityProvider["AWS_Marketplace"] = "AWS_Marketplace";
    IdentityProvider["Bitbucket"] = "Bitbucket";
    IdentityProvider["GitHub"] = "GitHub";
})(IdentityProvider = exports.IdentityProvider || (exports.IdentityProvider = {}));
var PublisherStatus;
(function (PublisherStatus) {
    PublisherStatus["UNVERIFIED"] = "UNVERIFIED";
    PublisherStatus["VERIFIED"] = "VERIFIED";
})(PublisherStatus = exports.PublisherStatus || (exports.PublisherStatus = {}));
var StackDriftDetectionStatus;
(function (StackDriftDetectionStatus) {
    StackDriftDetectionStatus["DETECTION_COMPLETE"] = "DETECTION_COMPLETE";
    StackDriftDetectionStatus["DETECTION_FAILED"] = "DETECTION_FAILED";
    StackDriftDetectionStatus["DETECTION_IN_PROGRESS"] = "DETECTION_IN_PROGRESS";
})(StackDriftDetectionStatus = exports.StackDriftDetectionStatus || (exports.StackDriftDetectionStatus = {}));
var StackDriftStatus;
(function (StackDriftStatus) {
    StackDriftStatus["DRIFTED"] = "DRIFTED";
    StackDriftStatus["IN_SYNC"] = "IN_SYNC";
    StackDriftStatus["NOT_CHECKED"] = "NOT_CHECKED";
    StackDriftStatus["UNKNOWN"] = "UNKNOWN";
})(StackDriftStatus = exports.StackDriftStatus || (exports.StackDriftStatus = {}));
var HookStatus;
(function (HookStatus) {
    HookStatus["HOOK_COMPLETE_FAILED"] = "HOOK_COMPLETE_FAILED";
    HookStatus["HOOK_COMPLETE_SUCCEEDED"] = "HOOK_COMPLETE_SUCCEEDED";
    HookStatus["HOOK_FAILED"] = "HOOK_FAILED";
    HookStatus["HOOK_IN_PROGRESS"] = "HOOK_IN_PROGRESS";
})(HookStatus = exports.HookStatus || (exports.HookStatus = {}));
var ResourceStatus;
(function (ResourceStatus) {
    ResourceStatus["CREATE_COMPLETE"] = "CREATE_COMPLETE";
    ResourceStatus["CREATE_FAILED"] = "CREATE_FAILED";
    ResourceStatus["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
    ResourceStatus["DELETE_COMPLETE"] = "DELETE_COMPLETE";
    ResourceStatus["DELETE_FAILED"] = "DELETE_FAILED";
    ResourceStatus["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
    ResourceStatus["DELETE_SKIPPED"] = "DELETE_SKIPPED";
    ResourceStatus["IMPORT_COMPLETE"] = "IMPORT_COMPLETE";
    ResourceStatus["IMPORT_FAILED"] = "IMPORT_FAILED";
    ResourceStatus["IMPORT_IN_PROGRESS"] = "IMPORT_IN_PROGRESS";
    ResourceStatus["IMPORT_ROLLBACK_COMPLETE"] = "IMPORT_ROLLBACK_COMPLETE";
    ResourceStatus["IMPORT_ROLLBACK_FAILED"] = "IMPORT_ROLLBACK_FAILED";
    ResourceStatus["IMPORT_ROLLBACK_IN_PROGRESS"] = "IMPORT_ROLLBACK_IN_PROGRESS";
    ResourceStatus["ROLLBACK_COMPLETE"] = "ROLLBACK_COMPLETE";
    ResourceStatus["ROLLBACK_FAILED"] = "ROLLBACK_FAILED";
    ResourceStatus["ROLLBACK_IN_PROGRESS"] = "ROLLBACK_IN_PROGRESS";
    ResourceStatus["UPDATE_COMPLETE"] = "UPDATE_COMPLETE";
    ResourceStatus["UPDATE_FAILED"] = "UPDATE_FAILED";
    ResourceStatus["UPDATE_IN_PROGRESS"] = "UPDATE_IN_PROGRESS";
    ResourceStatus["UPDATE_ROLLBACK_COMPLETE"] = "UPDATE_ROLLBACK_COMPLETE";
    ResourceStatus["UPDATE_ROLLBACK_FAILED"] = "UPDATE_ROLLBACK_FAILED";
    ResourceStatus["UPDATE_ROLLBACK_IN_PROGRESS"] = "UPDATE_ROLLBACK_IN_PROGRESS";
})(ResourceStatus = exports.ResourceStatus || (exports.ResourceStatus = {}));
var StackInstanceDetailedStatus;
(function (StackInstanceDetailedStatus) {
    StackInstanceDetailedStatus["CANCELLED"] = "CANCELLED";
    StackInstanceDetailedStatus["FAILED"] = "FAILED";
    StackInstanceDetailedStatus["INOPERABLE"] = "INOPERABLE";
    StackInstanceDetailedStatus["PENDING"] = "PENDING";
    StackInstanceDetailedStatus["RUNNING"] = "RUNNING";
    StackInstanceDetailedStatus["SUCCEEDED"] = "SUCCEEDED";
})(StackInstanceDetailedStatus = exports.StackInstanceDetailedStatus || (exports.StackInstanceDetailedStatus = {}));
var StackInstanceStatus;
(function (StackInstanceStatus) {
    StackInstanceStatus["CURRENT"] = "CURRENT";
    StackInstanceStatus["INOPERABLE"] = "INOPERABLE";
    StackInstanceStatus["OUTDATED"] = "OUTDATED";
})(StackInstanceStatus = exports.StackInstanceStatus || (exports.StackInstanceStatus = {}));
class StackInstanceNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "StackInstanceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "StackInstanceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StackInstanceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.StackInstanceNotFoundException = StackInstanceNotFoundException;
var StackResourceDriftStatus;
(function (StackResourceDriftStatus) {
    StackResourceDriftStatus["DELETED"] = "DELETED";
    StackResourceDriftStatus["IN_SYNC"] = "IN_SYNC";
    StackResourceDriftStatus["MODIFIED"] = "MODIFIED";
    StackResourceDriftStatus["NOT_CHECKED"] = "NOT_CHECKED";
})(StackResourceDriftStatus = exports.StackResourceDriftStatus || (exports.StackResourceDriftStatus = {}));
var DifferenceType;
(function (DifferenceType) {
    DifferenceType["ADD"] = "ADD";
    DifferenceType["NOT_EQUAL"] = "NOT_EQUAL";
    DifferenceType["REMOVE"] = "REMOVE";
})(DifferenceType = exports.DifferenceType || (exports.DifferenceType = {}));
var StackStatus;
(function (StackStatus) {
    StackStatus["CREATE_COMPLETE"] = "CREATE_COMPLETE";
    StackStatus["CREATE_FAILED"] = "CREATE_FAILED";
    StackStatus["CREATE_IN_PROGRESS"] = "CREATE_IN_PROGRESS";
    StackStatus["DELETE_COMPLETE"] = "DELETE_COMPLETE";
    StackStatus["DELETE_FAILED"] = "DELETE_FAILED";
    StackStatus["DELETE_IN_PROGRESS"] = "DELETE_IN_PROGRESS";
    StackStatus["IMPORT_COMPLETE"] = "IMPORT_COMPLETE";
    StackStatus["IMPORT_IN_PROGRESS"] = "IMPORT_IN_PROGRESS";
    StackStatus["IMPORT_ROLLBACK_COMPLETE"] = "IMPORT_ROLLBACK_COMPLETE";
    StackStatus["IMPORT_ROLLBACK_FAILED"] = "IMPORT_ROLLBACK_FAILED";
    StackStatus["IMPORT_ROLLBACK_IN_PROGRESS"] = "IMPORT_ROLLBACK_IN_PROGRESS";
    StackStatus["REVIEW_IN_PROGRESS"] = "REVIEW_IN_PROGRESS";
    StackStatus["ROLLBACK_COMPLETE"] = "ROLLBACK_COMPLETE";
    StackStatus["ROLLBACK_FAILED"] = "ROLLBACK_FAILED";
    StackStatus["ROLLBACK_IN_PROGRESS"] = "ROLLBACK_IN_PROGRESS";
    StackStatus["UPDATE_COMPLETE"] = "UPDATE_COMPLETE";
    StackStatus["UPDATE_COMPLETE_CLEANUP_IN_PROGRESS"] = "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS";
    StackStatus["UPDATE_FAILED"] = "UPDATE_FAILED";
    StackStatus["UPDATE_IN_PROGRESS"] = "UPDATE_IN_PROGRESS";
    StackStatus["UPDATE_ROLLBACK_COMPLETE"] = "UPDATE_ROLLBACK_COMPLETE";
    StackStatus["UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS"] = "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS";
    StackStatus["UPDATE_ROLLBACK_FAILED"] = "UPDATE_ROLLBACK_FAILED";
    StackStatus["UPDATE_ROLLBACK_IN_PROGRESS"] = "UPDATE_ROLLBACK_IN_PROGRESS";
})(StackStatus = exports.StackStatus || (exports.StackStatus = {}));
var StackSetDriftDetectionStatus;
(function (StackSetDriftDetectionStatus) {
    StackSetDriftDetectionStatus["COMPLETED"] = "COMPLETED";
    StackSetDriftDetectionStatus["FAILED"] = "FAILED";
    StackSetDriftDetectionStatus["IN_PROGRESS"] = "IN_PROGRESS";
    StackSetDriftDetectionStatus["PARTIAL_SUCCESS"] = "PARTIAL_SUCCESS";
    StackSetDriftDetectionStatus["STOPPED"] = "STOPPED";
})(StackSetDriftDetectionStatus = exports.StackSetDriftDetectionStatus || (exports.StackSetDriftDetectionStatus = {}));
var StackSetDriftStatus;
(function (StackSetDriftStatus) {
    StackSetDriftStatus["DRIFTED"] = "DRIFTED";
    StackSetDriftStatus["IN_SYNC"] = "IN_SYNC";
    StackSetDriftStatus["NOT_CHECKED"] = "NOT_CHECKED";
})(StackSetDriftStatus = exports.StackSetDriftStatus || (exports.StackSetDriftStatus = {}));
var StackSetStatus;
(function (StackSetStatus) {
    StackSetStatus["ACTIVE"] = "ACTIVE";
    StackSetStatus["DELETED"] = "DELETED";
})(StackSetStatus = exports.StackSetStatus || (exports.StackSetStatus = {}));
var StackSetOperationAction;
(function (StackSetOperationAction) {
    StackSetOperationAction["CREATE"] = "CREATE";
    StackSetOperationAction["DELETE"] = "DELETE";
    StackSetOperationAction["DETECT_DRIFT"] = "DETECT_DRIFT";
    StackSetOperationAction["UPDATE"] = "UPDATE";
})(StackSetOperationAction = exports.StackSetOperationAction || (exports.StackSetOperationAction = {}));
var StackSetOperationStatus;
(function (StackSetOperationStatus) {
    StackSetOperationStatus["FAILED"] = "FAILED";
    StackSetOperationStatus["QUEUED"] = "QUEUED";
    StackSetOperationStatus["RUNNING"] = "RUNNING";
    StackSetOperationStatus["STOPPED"] = "STOPPED";
    StackSetOperationStatus["STOPPING"] = "STOPPING";
    StackSetOperationStatus["SUCCEEDED"] = "SUCCEEDED";
})(StackSetOperationStatus = exports.StackSetOperationStatus || (exports.StackSetOperationStatus = {}));
class OperationNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "OperationNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationNotFoundException = OperationNotFoundException;
var DeprecatedStatus;
(function (DeprecatedStatus) {
    DeprecatedStatus["DEPRECATED"] = "DEPRECATED";
    DeprecatedStatus["LIVE"] = "LIVE";
})(DeprecatedStatus = exports.DeprecatedStatus || (exports.DeprecatedStatus = {}));
var ProvisioningType;
(function (ProvisioningType) {
    ProvisioningType["FULLY_MUTABLE"] = "FULLY_MUTABLE";
    ProvisioningType["IMMUTABLE"] = "IMMUTABLE";
    ProvisioningType["NON_PROVISIONABLE"] = "NON_PROVISIONABLE";
})(ProvisioningType = exports.ProvisioningType || (exports.ProvisioningType = {}));
var TypeTestsStatus;
(function (TypeTestsStatus) {
    TypeTestsStatus["FAILED"] = "FAILED";
    TypeTestsStatus["IN_PROGRESS"] = "IN_PROGRESS";
    TypeTestsStatus["NOT_TESTED"] = "NOT_TESTED";
    TypeTestsStatus["PASSED"] = "PASSED";
})(TypeTestsStatus = exports.TypeTestsStatus || (exports.TypeTestsStatus = {}));
var Visibility;
(function (Visibility) {
    Visibility["PRIVATE"] = "PRIVATE";
    Visibility["PUBLIC"] = "PUBLIC";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var RegistrationStatus;
(function (RegistrationStatus) {
    RegistrationStatus["COMPLETE"] = "COMPLETE";
    RegistrationStatus["FAILED"] = "FAILED";
    RegistrationStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(RegistrationStatus = exports.RegistrationStatus || (exports.RegistrationStatus = {}));
var TemplateStage;
(function (TemplateStage) {
    TemplateStage["Original"] = "Original";
    TemplateStage["Processed"] = "Processed";
})(TemplateStage = exports.TemplateStage || (exports.TemplateStage = {}));
class StackNotFoundException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "StackNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "StackNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StackNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.StackNotFoundException = StackNotFoundException;
var StackInstanceFilterName;
(function (StackInstanceFilterName) {
    StackInstanceFilterName["DETAILED_STATUS"] = "DETAILED_STATUS";
    StackInstanceFilterName["LAST_OPERATION_ID"] = "LAST_OPERATION_ID";
})(StackInstanceFilterName = exports.StackInstanceFilterName || (exports.StackInstanceFilterName = {}));
var OperationResultFilterName;
(function (OperationResultFilterName) {
    OperationResultFilterName["OPERATION_RESULT_STATUS"] = "OPERATION_RESULT_STATUS";
})(OperationResultFilterName = exports.OperationResultFilterName || (exports.OperationResultFilterName = {}));
var StackSetOperationResultStatus;
(function (StackSetOperationResultStatus) {
    StackSetOperationResultStatus["CANCELLED"] = "CANCELLED";
    StackSetOperationResultStatus["FAILED"] = "FAILED";
    StackSetOperationResultStatus["PENDING"] = "PENDING";
    StackSetOperationResultStatus["RUNNING"] = "RUNNING";
    StackSetOperationResultStatus["SUCCEEDED"] = "SUCCEEDED";
})(StackSetOperationResultStatus = exports.StackSetOperationResultStatus || (exports.StackSetOperationResultStatus = {}));
class InvalidStateTransitionException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "InvalidStateTransitionException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidStateTransitionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidStateTransitionException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidStateTransitionException = InvalidStateTransitionException;
class OperationStatusCheckFailedException extends CloudFormationServiceException_1.CloudFormationServiceException {
    constructor(opts) {
        super({
            name: "OperationStatusCheckFailedException",
            $fault: "client",
            ...opts,
        });
        this.name = "OperationStatusCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, OperationStatusCheckFailedException.prototype);
        this.Message = opts.Message;
    }
}
exports.OperationStatusCheckFailedException = OperationStatusCheckFailedException;
var OperationStatus;
(function (OperationStatus) {
    OperationStatus["FAILED"] = "FAILED";
    OperationStatus["IN_PROGRESS"] = "IN_PROGRESS";
    OperationStatus["PENDING"] = "PENDING";
    OperationStatus["SUCCESS"] = "SUCCESS";
})(OperationStatus = exports.OperationStatus || (exports.OperationStatus = {}));
var HandlerErrorCode;
(function (HandlerErrorCode) {
    HandlerErrorCode["AccessDenied"] = "AccessDenied";
    HandlerErrorCode["AlreadyExists"] = "AlreadyExists";
    HandlerErrorCode["GeneralServiceException"] = "GeneralServiceException";
    HandlerErrorCode["HandlerInternalFailure"] = "HandlerInternalFailure";
    HandlerErrorCode["InternalFailure"] = "InternalFailure";
    HandlerErrorCode["InvalidCredentials"] = "InvalidCredentials";
    HandlerErrorCode["InvalidRequest"] = "InvalidRequest";
    HandlerErrorCode["InvalidTypeConfiguration"] = "InvalidTypeConfiguration";
    HandlerErrorCode["NetworkFailure"] = "NetworkFailure";
    HandlerErrorCode["NonCompliant"] = "NonCompliant";
    HandlerErrorCode["NotFound"] = "NotFound";
    HandlerErrorCode["NotUpdatable"] = "NotUpdatable";
    HandlerErrorCode["ResourceConflict"] = "ResourceConflict";
    HandlerErrorCode["ServiceInternalError"] = "ServiceInternalError";
    HandlerErrorCode["ServiceLimitExceeded"] = "ServiceLimitExceeded";
    HandlerErrorCode["ServiceTimeout"] = "NotStabilized";
    HandlerErrorCode["Throttling"] = "Throttling";
    HandlerErrorCode["Unknown"] = "Unknown";
    HandlerErrorCode["UnsupportedTarget"] = "UnsupportedTarget";
})(HandlerErrorCode = exports.HandlerErrorCode || (exports.HandlerErrorCode = {}));
var ResourceSignalStatus;
(function (ResourceSignalStatus) {
    ResourceSignalStatus["FAILURE"] = "FAILURE";
    ResourceSignalStatus["SUCCESS"] = "SUCCESS";
})(ResourceSignalStatus = exports.ResourceSignalStatus || (exports.ResourceSignalStatus = {}));
