import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CloudFormationServiceException as __BaseException } from "./CloudFormationServiceException";
export declare enum AccountFilterType {
  DIFFERENCE = "DIFFERENCE",
  INTERSECTION = "INTERSECTION",
  NONE = "NONE",
  UNION = "UNION",
}
export declare enum AccountGateStatus {
  FAILED = "FAILED",
  SKIPPED = "SKIPPED",
  SUCCEEDED = "SUCCEEDED",
}
export interface AccountGateResult {
  Status?: AccountGateStatus | string;
  StatusReason?: string;
}
export interface AccountLimit {
  Name?: string;
  Value?: number;
}
export interface LoggingConfig {
  LogRoleArn: string | undefined;
  LogGroupName: string | undefined;
}
export declare enum ThirdPartyType {
  HOOK = "HOOK",
  MODULE = "MODULE",
  RESOURCE = "RESOURCE",
}
export declare enum VersionBump {
  MAJOR = "MAJOR",
  MINOR = "MINOR",
}
export interface ActivateTypeInput {
  Type?: ThirdPartyType | string;
  PublicTypeArn?: string;
  PublisherId?: string;
  TypeName?: string;
  TypeNameAlias?: string;
  AutoUpdate?: boolean;
  LoggingConfig?: LoggingConfig;
  ExecutionRoleArn?: string;
  VersionBump?: VersionBump | string;
  MajorVersion?: number;
}
export interface ActivateTypeOutput {
  Arn?: string;
}
export declare class CFNRegistryException extends __BaseException {
  readonly name: "CFNRegistryException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CFNRegistryException, __BaseException>
  );
}
export declare class TypeNotFoundException extends __BaseException {
  readonly name: "TypeNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TypeNotFoundException, __BaseException>
  );
}
export declare class AlreadyExistsException extends __BaseException {
  readonly name: "AlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AlreadyExistsException, __BaseException>
  );
}
export interface AutoDeployment {
  Enabled?: boolean;
  RetainStacksOnAccountRemoval?: boolean;
}
export interface TypeConfigurationIdentifier {
  TypeArn?: string;
  TypeConfigurationAlias?: string;
  TypeConfigurationArn?: string;
  Type?: ThirdPartyType | string;
  TypeName?: string;
}
export interface BatchDescribeTypeConfigurationsInput {
  TypeConfigurationIdentifiers: TypeConfigurationIdentifier[] | undefined;
}
export interface BatchDescribeTypeConfigurationsError {
  ErrorCode?: string;
  ErrorMessage?: string;
  TypeConfigurationIdentifier?: TypeConfigurationIdentifier;
}
export interface TypeConfigurationDetails {
  Arn?: string;
  Alias?: string;
  Configuration?: string;
  LastUpdated?: Date;
  TypeArn?: string;
  TypeName?: string;
  IsDefaultConfiguration?: boolean;
}
export interface BatchDescribeTypeConfigurationsOutput {
  Errors?: BatchDescribeTypeConfigurationsError[];
  UnprocessedTypeConfigurations?: TypeConfigurationIdentifier[];
  TypeConfigurations?: TypeConfigurationDetails[];
}
export declare class TypeConfigurationNotFoundException extends __BaseException {
  readonly name: "TypeConfigurationNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      TypeConfigurationNotFoundException,
      __BaseException
    >
  );
}
export declare enum CallAs {
  DELEGATED_ADMIN = "DELEGATED_ADMIN",
  SELF = "SELF",
}
export interface CancelUpdateStackInput {
  StackName: string | undefined;
  ClientRequestToken?: string;
}
export declare class TokenAlreadyExistsException extends __BaseException {
  readonly name: "TokenAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<TokenAlreadyExistsException, __BaseException>
  );
}
export declare enum Capability {
  CAPABILITY_AUTO_EXPAND = "CAPABILITY_AUTO_EXPAND",
  CAPABILITY_IAM = "CAPABILITY_IAM",
  CAPABILITY_NAMED_IAM = "CAPABILITY_NAMED_IAM",
}
export declare enum Category {
  ACTIVATED = "ACTIVATED",
  AWS_TYPES = "AWS_TYPES",
  REGISTERED = "REGISTERED",
  THIRD_PARTY = "THIRD_PARTY",
}
export declare enum ChangeAction {
  Add = "Add",
  Dynamic = "Dynamic",
  Import = "Import",
  Modify = "Modify",
  Remove = "Remove",
}
export declare enum ChangeSource {
  Automatic = "Automatic",
  DirectModification = "DirectModification",
  ParameterReference = "ParameterReference",
  ResourceAttribute = "ResourceAttribute",
  ResourceReference = "ResourceReference",
}
export declare enum EvaluationType {
  Dynamic = "Dynamic",
  Static = "Static",
}
export declare enum ResourceAttribute {
  CreationPolicy = "CreationPolicy",
  DeletionPolicy = "DeletionPolicy",
  Metadata = "Metadata",
  Properties = "Properties",
  Tags = "Tags",
  UpdatePolicy = "UpdatePolicy",
}
export declare enum RequiresRecreation {
  Always = "Always",
  Conditionally = "Conditionally",
  Never = "Never",
}
export interface ResourceTargetDefinition {
  Attribute?: ResourceAttribute | string;
  Name?: string;
  RequiresRecreation?: RequiresRecreation | string;
}
export interface ResourceChangeDetail {
  Target?: ResourceTargetDefinition;
  Evaluation?: EvaluationType | string;
  ChangeSource?: ChangeSource | string;
  CausingEntity?: string;
}
export interface ModuleInfo {
  TypeHierarchy?: string;
  LogicalIdHierarchy?: string;
}
export declare enum Replacement {
  Conditional = "Conditional",
  False = "False",
  True = "True",
}
export interface ResourceChange {
  Action?: ChangeAction | string;
  LogicalResourceId?: string;
  PhysicalResourceId?: string;
  ResourceType?: string;
  Replacement?: Replacement | string;
  Scope?: (ResourceAttribute | string)[];
  Details?: ResourceChangeDetail[];
  ChangeSetId?: string;
  ModuleInfo?: ModuleInfo;
}
export declare enum ChangeType {
  Resource = "Resource",
}
export interface Change {
  Type?: ChangeType | string;
  HookInvocationCount?: number;
  ResourceChange?: ResourceChange;
}
export declare enum HookFailureMode {
  FAIL = "FAIL",
  WARN = "WARN",
}
export declare enum HookInvocationPoint {
  PRE_PROVISION = "PRE_PROVISION",
}
export interface ChangeSetHookResourceTargetDetails {
  LogicalResourceId?: string;
  ResourceType?: string;
  ResourceAction?: ChangeAction | string;
}
export declare enum HookTargetType {
  RESOURCE = "RESOURCE",
}
export interface ChangeSetHookTargetDetails {
  TargetType?: HookTargetType | string;
  ResourceTargetDetails?: ChangeSetHookResourceTargetDetails;
}
export interface ChangeSetHook {
  InvocationPoint?: HookInvocationPoint | string;
  FailureMode?: HookFailureMode | string;
  TypeName?: string;
  TypeVersionId?: string;
  TypeConfigurationVersionId?: string;
  TargetDetails?: ChangeSetHookTargetDetails;
}
export declare enum ChangeSetHooksStatus {
  PLANNED = "PLANNED",
  PLANNING = "PLANNING",
  UNAVAILABLE = "UNAVAILABLE",
}
export declare class ChangeSetNotFoundException extends __BaseException {
  readonly name: "ChangeSetNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ChangeSetNotFoundException, __BaseException>
  );
}
export declare enum ChangeSetStatus {
  CREATE_COMPLETE = "CREATE_COMPLETE",
  CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
  CREATE_PENDING = "CREATE_PENDING",
  DELETE_COMPLETE = "DELETE_COMPLETE",
  DELETE_FAILED = "DELETE_FAILED",
  DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
  DELETE_PENDING = "DELETE_PENDING",
  FAILED = "FAILED",
}
export declare enum ExecutionStatus {
  AVAILABLE = "AVAILABLE",
  EXECUTE_COMPLETE = "EXECUTE_COMPLETE",
  EXECUTE_FAILED = "EXECUTE_FAILED",
  EXECUTE_IN_PROGRESS = "EXECUTE_IN_PROGRESS",
  OBSOLETE = "OBSOLETE",
  UNAVAILABLE = "UNAVAILABLE",
}
export interface ChangeSetSummary {
  StackId?: string;
  StackName?: string;
  ChangeSetId?: string;
  ChangeSetName?: string;
  ExecutionStatus?: ExecutionStatus | string;
  Status?: ChangeSetStatus | string;
  StatusReason?: string;
  CreationTime?: Date;
  Description?: string;
  IncludeNestedStacks?: boolean;
  ParentChangeSetId?: string;
  RootChangeSetId?: string;
}
export declare enum ChangeSetType {
  CREATE = "CREATE",
  IMPORT = "IMPORT",
  UPDATE = "UPDATE",
}
export interface ContinueUpdateRollbackInput {
  StackName: string | undefined;
  RoleARN?: string;
  ResourcesToSkip?: string[];
  ClientRequestToken?: string;
}
export interface ContinueUpdateRollbackOutput {}
export interface Parameter {
  ParameterKey?: string;
  ParameterValue?: string;
  UsePreviousValue?: boolean;
  ResolvedValue?: string;
}
export interface ResourceToImport {
  ResourceType: string | undefined;
  LogicalResourceId: string | undefined;
  ResourceIdentifier: Record<string, string> | undefined;
}
export interface RollbackTrigger {
  Arn: string | undefined;
  Type: string | undefined;
}
export interface RollbackConfiguration {
  RollbackTriggers?: RollbackTrigger[];
  MonitoringTimeInMinutes?: number;
}
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateChangeSetInput {
  StackName: string | undefined;
  TemplateBody?: string;
  TemplateURL?: string;
  UsePreviousTemplate?: boolean;
  Parameters?: Parameter[];
  Capabilities?: (Capability | string)[];
  ResourceTypes?: string[];
  RoleARN?: string;
  RollbackConfiguration?: RollbackConfiguration;
  NotificationARNs?: string[];
  Tags?: Tag[];
  ChangeSetName: string | undefined;
  ClientToken?: string;
  Description?: string;
  ChangeSetType?: ChangeSetType | string;
  ResourcesToImport?: ResourceToImport[];
  IncludeNestedStacks?: boolean;
}
export interface CreateChangeSetOutput {
  Id?: string;
  StackId?: string;
}
export declare class InsufficientCapabilitiesException extends __BaseException {
  readonly name: "InsufficientCapabilitiesException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InsufficientCapabilitiesException,
      __BaseException
    >
  );
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare enum OnFailure {
  DELETE = "DELETE",
  DO_NOTHING = "DO_NOTHING",
  ROLLBACK = "ROLLBACK",
}
export interface CreateStackInput {
  StackName: string | undefined;
  TemplateBody?: string;
  TemplateURL?: string;
  Parameters?: Parameter[];
  DisableRollback?: boolean;
  RollbackConfiguration?: RollbackConfiguration;
  TimeoutInMinutes?: number;
  NotificationARNs?: string[];
  Capabilities?: (Capability | string)[];
  ResourceTypes?: string[];
  RoleARN?: string;
  OnFailure?: OnFailure | string;
  StackPolicyBody?: string;
  StackPolicyURL?: string;
  Tags?: Tag[];
  ClientRequestToken?: string;
  EnableTerminationProtection?: boolean;
}
export interface CreateStackOutput {
  StackId?: string;
}
export interface DeploymentTargets {
  Accounts?: string[];
  AccountsUrl?: string;
  OrganizationalUnitIds?: string[];
  AccountFilterType?: AccountFilterType | string;
}
export declare enum RegionConcurrencyType {
  PARALLEL = "PARALLEL",
  SEQUENTIAL = "SEQUENTIAL",
}
export interface StackSetOperationPreferences {
  RegionConcurrencyType?: RegionConcurrencyType | string;
  RegionOrder?: string[];
  FailureToleranceCount?: number;
  FailureTolerancePercentage?: number;
  MaxConcurrentCount?: number;
  MaxConcurrentPercentage?: number;
}
export interface CreateStackInstancesInput {
  StackSetName: string | undefined;
  Accounts?: string[];
  DeploymentTargets?: DeploymentTargets;
  Regions: string[] | undefined;
  ParameterOverrides?: Parameter[];
  OperationPreferences?: StackSetOperationPreferences;
  OperationId?: string;
  CallAs?: CallAs | string;
}
export interface CreateStackInstancesOutput {
  OperationId?: string;
}
export declare class InvalidOperationException extends __BaseException {
  readonly name: "InvalidOperationException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidOperationException, __BaseException>
  );
}
export declare class OperationIdAlreadyExistsException extends __BaseException {
  readonly name: "OperationIdAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      OperationIdAlreadyExistsException,
      __BaseException
    >
  );
}
export declare class OperationInProgressException extends __BaseException {
  readonly name: "OperationInProgressException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OperationInProgressException, __BaseException>
  );
}
export declare class StackSetNotFoundException extends __BaseException {
  readonly name: "StackSetNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StackSetNotFoundException, __BaseException>
  );
}
export declare class StaleRequestException extends __BaseException {
  readonly name: "StaleRequestException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StaleRequestException, __BaseException>
  );
}
export declare class CreatedButModifiedException extends __BaseException {
  readonly name: "CreatedButModifiedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<CreatedButModifiedException, __BaseException>
  );
}
export interface ManagedExecution {
  Active?: boolean;
}
export declare enum PermissionModels {
  SELF_MANAGED = "SELF_MANAGED",
  SERVICE_MANAGED = "SERVICE_MANAGED",
}
export interface CreateStackSetInput {
  StackSetName: string | undefined;
  Description?: string;
  TemplateBody?: string;
  TemplateURL?: string;
  StackId?: string;
  Parameters?: Parameter[];
  Capabilities?: (Capability | string)[];
  Tags?: Tag[];
  AdministrationRoleARN?: string;
  ExecutionRoleName?: string;
  PermissionModel?: PermissionModels | string;
  AutoDeployment?: AutoDeployment;
  CallAs?: CallAs | string;
  ClientRequestToken?: string;
  ManagedExecution?: ManagedExecution;
}
export interface CreateStackSetOutput {
  StackSetId?: string;
}
export declare class NameAlreadyExistsException extends __BaseException {
  readonly name: "NameAlreadyExistsException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NameAlreadyExistsException, __BaseException>
  );
}
export interface DeactivateTypeInput {
  TypeName?: string;
  Type?: ThirdPartyType | string;
  Arn?: string;
}
export interface DeactivateTypeOutput {}
export interface DeleteChangeSetInput {
  ChangeSetName: string | undefined;
  StackName?: string;
}
export interface DeleteChangeSetOutput {}
export declare class InvalidChangeSetStatusException extends __BaseException {
  readonly name: "InvalidChangeSetStatusException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidChangeSetStatusException,
      __BaseException
    >
  );
}
export interface DeleteStackInput {
  StackName: string | undefined;
  RetainResources?: string[];
  RoleARN?: string;
  ClientRequestToken?: string;
}
export interface DeleteStackInstancesInput {
  StackSetName: string | undefined;
  Accounts?: string[];
  DeploymentTargets?: DeploymentTargets;
  Regions: string[] | undefined;
  OperationPreferences?: StackSetOperationPreferences;
  RetainStacks: boolean | undefined;
  OperationId?: string;
  CallAs?: CallAs | string;
}
export interface DeleteStackInstancesOutput {
  OperationId?: string;
}
export interface DeleteStackSetInput {
  StackSetName: string | undefined;
  CallAs?: CallAs | string;
}
export interface DeleteStackSetOutput {}
export declare class StackSetNotEmptyException extends __BaseException {
  readonly name: "StackSetNotEmptyException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StackSetNotEmptyException, __BaseException>
  );
}
export declare enum RegistryType {
  HOOK = "HOOK",
  MODULE = "MODULE",
  RESOURCE = "RESOURCE",
}
export interface DeregisterTypeInput {
  Arn?: string;
  Type?: RegistryType | string;
  TypeName?: string;
  VersionId?: string;
}
export interface DeregisterTypeOutput {}
export interface DescribeAccountLimitsInput {
  NextToken?: string;
}
export interface DescribeAccountLimitsOutput {
  AccountLimits?: AccountLimit[];
  NextToken?: string;
}
export interface DescribeChangeSetInput {
  ChangeSetName: string | undefined;
  StackName?: string;
  NextToken?: string;
}
export interface DescribeChangeSetOutput {
  ChangeSetName?: string;
  ChangeSetId?: string;
  StackId?: string;
  StackName?: string;
  Description?: string;
  Parameters?: Parameter[];
  CreationTime?: Date;
  ExecutionStatus?: ExecutionStatus | string;
  Status?: ChangeSetStatus | string;
  StatusReason?: string;
  NotificationARNs?: string[];
  RollbackConfiguration?: RollbackConfiguration;
  Capabilities?: (Capability | string)[];
  Tags?: Tag[];
  Changes?: Change[];
  NextToken?: string;
  IncludeNestedStacks?: boolean;
  ParentChangeSetId?: string;
  RootChangeSetId?: string;
}
export interface DescribeChangeSetHooksInput {
  ChangeSetName: string | undefined;
  StackName?: string;
  NextToken?: string;
  LogicalResourceId?: string;
}
export interface DescribeChangeSetHooksOutput {
  ChangeSetId?: string;
  ChangeSetName?: string;
  Hooks?: ChangeSetHook[];
  Status?: ChangeSetHooksStatus | string;
  NextToken?: string;
  StackId?: string;
  StackName?: string;
}
export interface DescribePublisherInput {
  PublisherId?: string;
}
export declare enum IdentityProvider {
  AWS_Marketplace = "AWS_Marketplace",
  Bitbucket = "Bitbucket",
  GitHub = "GitHub",
}
export declare enum PublisherStatus {
  UNVERIFIED = "UNVERIFIED",
  VERIFIED = "VERIFIED",
}
export interface DescribePublisherOutput {
  PublisherId?: string;
  PublisherStatus?: PublisherStatus | string;
  IdentityProvider?: IdentityProvider | string;
  PublisherProfile?: string;
}
export interface DescribeStackDriftDetectionStatusInput {
  StackDriftDetectionId: string | undefined;
}
export declare enum StackDriftDetectionStatus {
  DETECTION_COMPLETE = "DETECTION_COMPLETE",
  DETECTION_FAILED = "DETECTION_FAILED",
  DETECTION_IN_PROGRESS = "DETECTION_IN_PROGRESS",
}
export declare enum StackDriftStatus {
  DRIFTED = "DRIFTED",
  IN_SYNC = "IN_SYNC",
  NOT_CHECKED = "NOT_CHECKED",
  UNKNOWN = "UNKNOWN",
}
export interface DescribeStackDriftDetectionStatusOutput {
  StackId: string | undefined;
  StackDriftDetectionId: string | undefined;
  StackDriftStatus?: StackDriftStatus | string;
  DetectionStatus: StackDriftDetectionStatus | string | undefined;
  DetectionStatusReason?: string;
  DriftedStackResourceCount?: number;
  Timestamp: Date | undefined;
}
export interface DescribeStackEventsInput {
  StackName?: string;
  NextToken?: string;
}
export declare enum HookStatus {
  HOOK_COMPLETE_FAILED = "HOOK_COMPLETE_FAILED",
  HOOK_COMPLETE_SUCCEEDED = "HOOK_COMPLETE_SUCCEEDED",
  HOOK_FAILED = "HOOK_FAILED",
  HOOK_IN_PROGRESS = "HOOK_IN_PROGRESS",
}
export declare enum ResourceStatus {
  CREATE_COMPLETE = "CREATE_COMPLETE",
  CREATE_FAILED = "CREATE_FAILED",
  CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
  DELETE_COMPLETE = "DELETE_COMPLETE",
  DELETE_FAILED = "DELETE_FAILED",
  DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
  DELETE_SKIPPED = "DELETE_SKIPPED",
  IMPORT_COMPLETE = "IMPORT_COMPLETE",
  IMPORT_FAILED = "IMPORT_FAILED",
  IMPORT_IN_PROGRESS = "IMPORT_IN_PROGRESS",
  IMPORT_ROLLBACK_COMPLETE = "IMPORT_ROLLBACK_COMPLETE",
  IMPORT_ROLLBACK_FAILED = "IMPORT_ROLLBACK_FAILED",
  IMPORT_ROLLBACK_IN_PROGRESS = "IMPORT_ROLLBACK_IN_PROGRESS",
  ROLLBACK_COMPLETE = "ROLLBACK_COMPLETE",
  ROLLBACK_FAILED = "ROLLBACK_FAILED",
  ROLLBACK_IN_PROGRESS = "ROLLBACK_IN_PROGRESS",
  UPDATE_COMPLETE = "UPDATE_COMPLETE",
  UPDATE_FAILED = "UPDATE_FAILED",
  UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
  UPDATE_ROLLBACK_COMPLETE = "UPDATE_ROLLBACK_COMPLETE",
  UPDATE_ROLLBACK_FAILED = "UPDATE_ROLLBACK_FAILED",
  UPDATE_ROLLBACK_IN_PROGRESS = "UPDATE_ROLLBACK_IN_PROGRESS",
}
export interface StackEvent {
  StackId: string | undefined;
  EventId: string | undefined;
  StackName: string | undefined;
  LogicalResourceId?: string;
  PhysicalResourceId?: string;
  ResourceType?: string;
  Timestamp: Date | undefined;
  ResourceStatus?: ResourceStatus | string;
  ResourceStatusReason?: string;
  ResourceProperties?: string;
  ClientRequestToken?: string;
  HookType?: string;
  HookStatus?: HookStatus | string;
  HookStatusReason?: string;
  HookInvocationPoint?: HookInvocationPoint | string;
  HookFailureMode?: HookFailureMode | string;
}
export interface DescribeStackEventsOutput {
  StackEvents?: StackEvent[];
  NextToken?: string;
}
export interface DescribeStackInstanceInput {
  StackSetName: string | undefined;
  StackInstanceAccount: string | undefined;
  StackInstanceRegion: string | undefined;
  CallAs?: CallAs | string;
}
export declare enum StackInstanceDetailedStatus {
  CANCELLED = "CANCELLED",
  FAILED = "FAILED",
  INOPERABLE = "INOPERABLE",
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  SUCCEEDED = "SUCCEEDED",
}
export interface StackInstanceComprehensiveStatus {
  DetailedStatus?: StackInstanceDetailedStatus | string;
}
export declare enum StackInstanceStatus {
  CURRENT = "CURRENT",
  INOPERABLE = "INOPERABLE",
  OUTDATED = "OUTDATED",
}
export interface StackInstance {
  StackSetId?: string;
  Region?: string;
  Account?: string;
  StackId?: string;
  ParameterOverrides?: Parameter[];
  Status?: StackInstanceStatus | string;
  StackInstanceStatus?: StackInstanceComprehensiveStatus;
  StatusReason?: string;
  OrganizationalUnitId?: string;
  DriftStatus?: StackDriftStatus | string;
  LastDriftCheckTimestamp?: Date;
  LastOperationId?: string;
}
export interface DescribeStackInstanceOutput {
  StackInstance?: StackInstance;
}
export declare class StackInstanceNotFoundException extends __BaseException {
  readonly name: "StackInstanceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StackInstanceNotFoundException, __BaseException>
  );
}
export interface DescribeStackResourceInput {
  StackName: string | undefined;
  LogicalResourceId: string | undefined;
}
export declare enum StackResourceDriftStatus {
  DELETED = "DELETED",
  IN_SYNC = "IN_SYNC",
  MODIFIED = "MODIFIED",
  NOT_CHECKED = "NOT_CHECKED",
}
export interface StackResourceDriftInformation {
  StackResourceDriftStatus: StackResourceDriftStatus | string | undefined;
  LastCheckTimestamp?: Date;
}
export interface StackResourceDetail {
  StackName?: string;
  StackId?: string;
  LogicalResourceId: string | undefined;
  PhysicalResourceId?: string;
  ResourceType: string | undefined;
  LastUpdatedTimestamp: Date | undefined;
  ResourceStatus: ResourceStatus | string | undefined;
  ResourceStatusReason?: string;
  Description?: string;
  Metadata?: string;
  DriftInformation?: StackResourceDriftInformation;
  ModuleInfo?: ModuleInfo;
}
export interface DescribeStackResourceOutput {
  StackResourceDetail?: StackResourceDetail;
}
export interface DescribeStackResourceDriftsInput {
  StackName: string | undefined;
  StackResourceDriftStatusFilters?: (StackResourceDriftStatus | string)[];
  NextToken?: string;
  MaxResults?: number;
}
export interface PhysicalResourceIdContextKeyValuePair {
  Key: string | undefined;
  Value: string | undefined;
}
export declare enum DifferenceType {
  ADD = "ADD",
  NOT_EQUAL = "NOT_EQUAL",
  REMOVE = "REMOVE",
}
export interface PropertyDifference {
  PropertyPath: string | undefined;
  ExpectedValue: string | undefined;
  ActualValue: string | undefined;
  DifferenceType: DifferenceType | string | undefined;
}
export interface StackResourceDrift {
  StackId: string | undefined;
  LogicalResourceId: string | undefined;
  PhysicalResourceId?: string;
  PhysicalResourceIdContext?: PhysicalResourceIdContextKeyValuePair[];
  ResourceType: string | undefined;
  ExpectedProperties?: string;
  ActualProperties?: string;
  PropertyDifferences?: PropertyDifference[];
  StackResourceDriftStatus: StackResourceDriftStatus | string | undefined;
  Timestamp: Date | undefined;
  ModuleInfo?: ModuleInfo;
}
export interface DescribeStackResourceDriftsOutput {
  StackResourceDrifts: StackResourceDrift[] | undefined;
  NextToken?: string;
}
export interface DescribeStackResourcesInput {
  StackName?: string;
  LogicalResourceId?: string;
  PhysicalResourceId?: string;
}
export interface StackResource {
  StackName?: string;
  StackId?: string;
  LogicalResourceId: string | undefined;
  PhysicalResourceId?: string;
  ResourceType: string | undefined;
  Timestamp: Date | undefined;
  ResourceStatus: ResourceStatus | string | undefined;
  ResourceStatusReason?: string;
  Description?: string;
  DriftInformation?: StackResourceDriftInformation;
  ModuleInfo?: ModuleInfo;
}
export interface DescribeStackResourcesOutput {
  StackResources?: StackResource[];
}
export interface DescribeStacksInput {
  StackName?: string;
  NextToken?: string;
}
export interface StackDriftInformation {
  StackDriftStatus: StackDriftStatus | string | undefined;
  LastCheckTimestamp?: Date;
}
export interface Output {
  OutputKey?: string;
  OutputValue?: string;
  Description?: string;
  ExportName?: string;
}
export declare enum StackStatus {
  CREATE_COMPLETE = "CREATE_COMPLETE",
  CREATE_FAILED = "CREATE_FAILED",
  CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
  DELETE_COMPLETE = "DELETE_COMPLETE",
  DELETE_FAILED = "DELETE_FAILED",
  DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
  IMPORT_COMPLETE = "IMPORT_COMPLETE",
  IMPORT_IN_PROGRESS = "IMPORT_IN_PROGRESS",
  IMPORT_ROLLBACK_COMPLETE = "IMPORT_ROLLBACK_COMPLETE",
  IMPORT_ROLLBACK_FAILED = "IMPORT_ROLLBACK_FAILED",
  IMPORT_ROLLBACK_IN_PROGRESS = "IMPORT_ROLLBACK_IN_PROGRESS",
  REVIEW_IN_PROGRESS = "REVIEW_IN_PROGRESS",
  ROLLBACK_COMPLETE = "ROLLBACK_COMPLETE",
  ROLLBACK_FAILED = "ROLLBACK_FAILED",
  ROLLBACK_IN_PROGRESS = "ROLLBACK_IN_PROGRESS",
  UPDATE_COMPLETE = "UPDATE_COMPLETE",
  UPDATE_COMPLETE_CLEANUP_IN_PROGRESS = "UPDATE_COMPLETE_CLEANUP_IN_PROGRESS",
  UPDATE_FAILED = "UPDATE_FAILED",
  UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS",
  UPDATE_ROLLBACK_COMPLETE = "UPDATE_ROLLBACK_COMPLETE",
  UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS = "UPDATE_ROLLBACK_COMPLETE_CLEANUP_IN_PROGRESS",
  UPDATE_ROLLBACK_FAILED = "UPDATE_ROLLBACK_FAILED",
  UPDATE_ROLLBACK_IN_PROGRESS = "UPDATE_ROLLBACK_IN_PROGRESS",
}
export interface Stack {
  StackId?: string;
  StackName: string | undefined;
  ChangeSetId?: string;
  Description?: string;
  Parameters?: Parameter[];
  CreationTime: Date | undefined;
  DeletionTime?: Date;
  LastUpdatedTime?: Date;
  RollbackConfiguration?: RollbackConfiguration;
  StackStatus: StackStatus | string | undefined;
  StackStatusReason?: string;
  DisableRollback?: boolean;
  NotificationARNs?: string[];
  TimeoutInMinutes?: number;
  Capabilities?: (Capability | string)[];
  Outputs?: Output[];
  RoleARN?: string;
  Tags?: Tag[];
  EnableTerminationProtection?: boolean;
  ParentId?: string;
  RootId?: string;
  DriftInformation?: StackDriftInformation;
}
export interface DescribeStacksOutput {
  Stacks?: Stack[];
  NextToken?: string;
}
export interface DescribeStackSetInput {
  StackSetName: string | undefined;
  CallAs?: CallAs | string;
}
export declare enum StackSetDriftDetectionStatus {
  COMPLETED = "COMPLETED",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
  PARTIAL_SUCCESS = "PARTIAL_SUCCESS",
  STOPPED = "STOPPED",
}
export declare enum StackSetDriftStatus {
  DRIFTED = "DRIFTED",
  IN_SYNC = "IN_SYNC",
  NOT_CHECKED = "NOT_CHECKED",
}
export interface StackSetDriftDetectionDetails {
  DriftStatus?: StackSetDriftStatus | string;
  DriftDetectionStatus?: StackSetDriftDetectionStatus | string;
  LastDriftCheckTimestamp?: Date;
  TotalStackInstancesCount?: number;
  DriftedStackInstancesCount?: number;
  InSyncStackInstancesCount?: number;
  InProgressStackInstancesCount?: number;
  FailedStackInstancesCount?: number;
}
export declare enum StackSetStatus {
  ACTIVE = "ACTIVE",
  DELETED = "DELETED",
}
export interface StackSet {
  StackSetName?: string;
  StackSetId?: string;
  Description?: string;
  Status?: StackSetStatus | string;
  TemplateBody?: string;
  Parameters?: Parameter[];
  Capabilities?: (Capability | string)[];
  Tags?: Tag[];
  StackSetARN?: string;
  AdministrationRoleARN?: string;
  ExecutionRoleName?: string;
  StackSetDriftDetectionDetails?: StackSetDriftDetectionDetails;
  AutoDeployment?: AutoDeployment;
  PermissionModel?: PermissionModels | string;
  OrganizationalUnitIds?: string[];
  ManagedExecution?: ManagedExecution;
  Regions?: string[];
}
export interface DescribeStackSetOutput {
  StackSet?: StackSet;
}
export interface DescribeStackSetOperationInput {
  StackSetName: string | undefined;
  OperationId: string | undefined;
  CallAs?: CallAs | string;
}
export declare enum StackSetOperationAction {
  CREATE = "CREATE",
  DELETE = "DELETE",
  DETECT_DRIFT = "DETECT_DRIFT",
  UPDATE = "UPDATE",
}
export declare enum StackSetOperationStatus {
  FAILED = "FAILED",
  QUEUED = "QUEUED",
  RUNNING = "RUNNING",
  STOPPED = "STOPPED",
  STOPPING = "STOPPING",
  SUCCEEDED = "SUCCEEDED",
}
export interface StackSetOperationStatusDetails {
  FailedStackInstancesCount?: number;
}
export interface StackSetOperation {
  OperationId?: string;
  StackSetId?: string;
  Action?: StackSetOperationAction | string;
  Status?: StackSetOperationStatus | string;
  OperationPreferences?: StackSetOperationPreferences;
  RetainStacks?: boolean;
  AdministrationRoleARN?: string;
  ExecutionRoleName?: string;
  CreationTimestamp?: Date;
  EndTimestamp?: Date;
  DeploymentTargets?: DeploymentTargets;
  StackSetDriftDetectionDetails?: StackSetDriftDetectionDetails;
  StatusReason?: string;
  StatusDetails?: StackSetOperationStatusDetails;
}
export interface DescribeStackSetOperationOutput {
  StackSetOperation?: StackSetOperation;
}
export declare class OperationNotFoundException extends __BaseException {
  readonly name: "OperationNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<OperationNotFoundException, __BaseException>
  );
}
export interface DescribeTypeInput {
  Type?: RegistryType | string;
  TypeName?: string;
  Arn?: string;
  VersionId?: string;
  PublisherId?: string;
  PublicVersionNumber?: string;
}
export declare enum DeprecatedStatus {
  DEPRECATED = "DEPRECATED",
  LIVE = "LIVE",
}
export declare enum ProvisioningType {
  FULLY_MUTABLE = "FULLY_MUTABLE",
  IMMUTABLE = "IMMUTABLE",
  NON_PROVISIONABLE = "NON_PROVISIONABLE",
}
export interface RequiredActivatedType {
  TypeNameAlias?: string;
  OriginalTypeName?: string;
  PublisherId?: string;
  SupportedMajorVersions?: number[];
}
export declare enum TypeTestsStatus {
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
  NOT_TESTED = "NOT_TESTED",
  PASSED = "PASSED",
}
export declare enum Visibility {
  PRIVATE = "PRIVATE",
  PUBLIC = "PUBLIC",
}
export interface DescribeTypeOutput {
  Arn?: string;
  Type?: RegistryType | string;
  TypeName?: string;
  DefaultVersionId?: string;
  IsDefaultVersion?: boolean;
  TypeTestsStatus?: TypeTestsStatus | string;
  TypeTestsStatusDescription?: string;
  Description?: string;
  Schema?: string;
  ProvisioningType?: ProvisioningType | string;
  DeprecatedStatus?: DeprecatedStatus | string;
  LoggingConfig?: LoggingConfig;
  RequiredActivatedTypes?: RequiredActivatedType[];
  ExecutionRoleArn?: string;
  Visibility?: Visibility | string;
  SourceUrl?: string;
  DocumentationUrl?: string;
  LastUpdated?: Date;
  TimeCreated?: Date;
  ConfigurationSchema?: string;
  PublisherId?: string;
  OriginalTypeName?: string;
  OriginalTypeArn?: string;
  PublicVersionNumber?: string;
  LatestPublicVersion?: string;
  IsActivated?: boolean;
  AutoUpdate?: boolean;
}
export interface DescribeTypeRegistrationInput {
  RegistrationToken: string | undefined;
}
export declare enum RegistrationStatus {
  COMPLETE = "COMPLETE",
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
}
export interface DescribeTypeRegistrationOutput {
  ProgressStatus?: RegistrationStatus | string;
  Description?: string;
  TypeArn?: string;
  TypeVersionArn?: string;
}
export interface DetectStackDriftInput {
  StackName: string | undefined;
  LogicalResourceIds?: string[];
}
export interface DetectStackDriftOutput {
  StackDriftDetectionId: string | undefined;
}
export interface DetectStackResourceDriftInput {
  StackName: string | undefined;
  LogicalResourceId: string | undefined;
}
export interface DetectStackResourceDriftOutput {
  StackResourceDrift: StackResourceDrift | undefined;
}
export interface DetectStackSetDriftInput {
  StackSetName: string | undefined;
  OperationPreferences?: StackSetOperationPreferences;
  OperationId?: string;
  CallAs?: CallAs | string;
}
export interface DetectStackSetDriftOutput {
  OperationId?: string;
}
export interface EstimateTemplateCostInput {
  TemplateBody?: string;
  TemplateURL?: string;
  Parameters?: Parameter[];
}
export interface EstimateTemplateCostOutput {
  Url?: string;
}
export interface ExecuteChangeSetInput {
  ChangeSetName: string | undefined;
  StackName?: string;
  ClientRequestToken?: string;
  DisableRollback?: boolean;
}
export interface ExecuteChangeSetOutput {}
export interface GetStackPolicyInput {
  StackName: string | undefined;
}
export interface GetStackPolicyOutput {
  StackPolicyBody?: string;
}
export declare enum TemplateStage {
  Original = "Original",
  Processed = "Processed",
}
export interface GetTemplateInput {
  StackName?: string;
  ChangeSetName?: string;
  TemplateStage?: TemplateStage | string;
}
export interface GetTemplateOutput {
  TemplateBody?: string;
  StagesAvailable?: (TemplateStage | string)[];
}
export interface GetTemplateSummaryInput {
  TemplateBody?: string;
  TemplateURL?: string;
  StackName?: string;
  StackSetName?: string;
  CallAs?: CallAs | string;
}
export interface ParameterConstraints {
  AllowedValues?: string[];
}
export interface ParameterDeclaration {
  ParameterKey?: string;
  DefaultValue?: string;
  ParameterType?: string;
  NoEcho?: boolean;
  Description?: string;
  ParameterConstraints?: ParameterConstraints;
}
export interface ResourceIdentifierSummary {
  ResourceType?: string;
  LogicalResourceIds?: string[];
  ResourceIdentifiers?: string[];
}
export interface GetTemplateSummaryOutput {
  Parameters?: ParameterDeclaration[];
  Description?: string;
  Capabilities?: (Capability | string)[];
  CapabilitiesReason?: string;
  ResourceTypes?: string[];
  Version?: string;
  Metadata?: string;
  DeclaredTransforms?: string[];
  ResourceIdentifierSummaries?: ResourceIdentifierSummary[];
}
export interface ImportStacksToStackSetInput {
  StackSetName: string | undefined;
  StackIds?: string[];
  StackIdsUrl?: string;
  OrganizationalUnitIds?: string[];
  OperationPreferences?: StackSetOperationPreferences;
  OperationId?: string;
  CallAs?: CallAs | string;
}
export interface ImportStacksToStackSetOutput {
  OperationId?: string;
}
export declare class StackNotFoundException extends __BaseException {
  readonly name: "StackNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<StackNotFoundException, __BaseException>
  );
}
export interface ListChangeSetsInput {
  StackName: string | undefined;
  NextToken?: string;
}
export interface ListChangeSetsOutput {
  Summaries?: ChangeSetSummary[];
  NextToken?: string;
}
export interface ListExportsInput {
  NextToken?: string;
}
export interface Export {
  ExportingStackId?: string;
  Name?: string;
  Value?: string;
}
export interface ListExportsOutput {
  Exports?: Export[];
  NextToken?: string;
}
export interface ListImportsInput {
  ExportName: string | undefined;
  NextToken?: string;
}
export interface ListImportsOutput {
  Imports?: string[];
  NextToken?: string;
}
export declare enum StackInstanceFilterName {
  DETAILED_STATUS = "DETAILED_STATUS",
  LAST_OPERATION_ID = "LAST_OPERATION_ID",
}
export interface StackInstanceFilter {
  Name?: StackInstanceFilterName | string;
  Values?: string;
}
export interface ListStackInstancesInput {
  StackSetName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  Filters?: StackInstanceFilter[];
  StackInstanceAccount?: string;
  StackInstanceRegion?: string;
  CallAs?: CallAs | string;
}
export interface StackInstanceSummary {
  StackSetId?: string;
  Region?: string;
  Account?: string;
  StackId?: string;
  Status?: StackInstanceStatus | string;
  StatusReason?: string;
  StackInstanceStatus?: StackInstanceComprehensiveStatus;
  OrganizationalUnitId?: string;
  DriftStatus?: StackDriftStatus | string;
  LastDriftCheckTimestamp?: Date;
  LastOperationId?: string;
}
export interface ListStackInstancesOutput {
  Summaries?: StackInstanceSummary[];
  NextToken?: string;
}
export interface ListStackResourcesInput {
  StackName: string | undefined;
  NextToken?: string;
}
export interface StackResourceDriftInformationSummary {
  StackResourceDriftStatus: StackResourceDriftStatus | string | undefined;
  LastCheckTimestamp?: Date;
}
export interface StackResourceSummary {
  LogicalResourceId: string | undefined;
  PhysicalResourceId?: string;
  ResourceType: string | undefined;
  LastUpdatedTimestamp: Date | undefined;
  ResourceStatus: ResourceStatus | string | undefined;
  ResourceStatusReason?: string;
  DriftInformation?: StackResourceDriftInformationSummary;
  ModuleInfo?: ModuleInfo;
}
export interface ListStackResourcesOutput {
  StackResourceSummaries?: StackResourceSummary[];
  NextToken?: string;
}
export interface ListStacksInput {
  NextToken?: string;
  StackStatusFilter?: (StackStatus | string)[];
}
export interface StackDriftInformationSummary {
  StackDriftStatus: StackDriftStatus | string | undefined;
  LastCheckTimestamp?: Date;
}
export interface StackSummary {
  StackId?: string;
  StackName: string | undefined;
  TemplateDescription?: string;
  CreationTime: Date | undefined;
  LastUpdatedTime?: Date;
  DeletionTime?: Date;
  StackStatus: StackStatus | string | undefined;
  StackStatusReason?: string;
  ParentId?: string;
  RootId?: string;
  DriftInformation?: StackDriftInformationSummary;
}
export interface ListStacksOutput {
  StackSummaries?: StackSummary[];
  NextToken?: string;
}
export declare enum OperationResultFilterName {
  OPERATION_RESULT_STATUS = "OPERATION_RESULT_STATUS",
}
export interface OperationResultFilter {
  Name?: OperationResultFilterName | string;
  Values?: string;
}
export interface ListStackSetOperationResultsInput {
  StackSetName: string | undefined;
  OperationId: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  CallAs?: CallAs | string;
  Filters?: OperationResultFilter[];
}
export declare enum StackSetOperationResultStatus {
  CANCELLED = "CANCELLED",
  FAILED = "FAILED",
  PENDING = "PENDING",
  RUNNING = "RUNNING",
  SUCCEEDED = "SUCCEEDED",
}
export interface StackSetOperationResultSummary {
  Account?: string;
  Region?: string;
  Status?: StackSetOperationResultStatus | string;
  StatusReason?: string;
  AccountGateResult?: AccountGateResult;
  OrganizationalUnitId?: string;
}
export interface ListStackSetOperationResultsOutput {
  Summaries?: StackSetOperationResultSummary[];
  NextToken?: string;
}
export interface ListStackSetOperationsInput {
  StackSetName: string | undefined;
  NextToken?: string;
  MaxResults?: number;
  CallAs?: CallAs | string;
}
export interface StackSetOperationSummary {
  OperationId?: string;
  Action?: StackSetOperationAction | string;
  Status?: StackSetOperationStatus | string;
  CreationTimestamp?: Date;
  EndTimestamp?: Date;
  StatusReason?: string;
  StatusDetails?: StackSetOperationStatusDetails;
  OperationPreferences?: StackSetOperationPreferences;
}
export interface ListStackSetOperationsOutput {
  Summaries?: StackSetOperationSummary[];
  NextToken?: string;
}
export interface ListStackSetsInput {
  NextToken?: string;
  MaxResults?: number;
  Status?: StackSetStatus | string;
  CallAs?: CallAs | string;
}
export interface StackSetSummary {
  StackSetName?: string;
  StackSetId?: string;
  Description?: string;
  Status?: StackSetStatus | string;
  AutoDeployment?: AutoDeployment;
  PermissionModel?: PermissionModels | string;
  DriftStatus?: StackDriftStatus | string;
  LastDriftCheckTimestamp?: Date;
  ManagedExecution?: ManagedExecution;
}
export interface ListStackSetsOutput {
  Summaries?: StackSetSummary[];
  NextToken?: string;
}
export interface ListTypeRegistrationsInput {
  Type?: RegistryType | string;
  TypeName?: string;
  TypeArn?: string;
  RegistrationStatusFilter?: RegistrationStatus | string;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListTypeRegistrationsOutput {
  RegistrationTokenList?: string[];
  NextToken?: string;
}
export interface TypeFilters {
  Category?: Category | string;
  PublisherId?: string;
  TypeNamePrefix?: string;
}
export interface ListTypesInput {
  Visibility?: Visibility | string;
  ProvisioningType?: ProvisioningType | string;
  DeprecatedStatus?: DeprecatedStatus | string;
  Type?: RegistryType | string;
  Filters?: TypeFilters;
  MaxResults?: number;
  NextToken?: string;
}
export interface TypeSummary {
  Type?: RegistryType | string;
  TypeName?: string;
  DefaultVersionId?: string;
  TypeArn?: string;
  LastUpdated?: Date;
  Description?: string;
  PublisherId?: string;
  OriginalTypeName?: string;
  PublicVersionNumber?: string;
  LatestPublicVersion?: string;
  PublisherIdentity?: IdentityProvider | string;
  PublisherName?: string;
  IsActivated?: boolean;
}
export interface ListTypesOutput {
  TypeSummaries?: TypeSummary[];
  NextToken?: string;
}
export interface ListTypeVersionsInput {
  Type?: RegistryType | string;
  TypeName?: string;
  Arn?: string;
  MaxResults?: number;
  NextToken?: string;
  DeprecatedStatus?: DeprecatedStatus | string;
  PublisherId?: string;
}
export interface TypeVersionSummary {
  Type?: RegistryType | string;
  TypeName?: string;
  VersionId?: string;
  IsDefaultVersion?: boolean;
  Arn?: string;
  TimeCreated?: Date;
  Description?: string;
  PublicVersionNumber?: string;
}
export interface ListTypeVersionsOutput {
  TypeVersionSummaries?: TypeVersionSummary[];
  NextToken?: string;
}
export interface PublishTypeInput {
  Type?: ThirdPartyType | string;
  Arn?: string;
  TypeName?: string;
  PublicVersionNumber?: string;
}
export interface PublishTypeOutput {
  PublicTypeArn?: string;
}
export declare class InvalidStateTransitionException extends __BaseException {
  readonly name: "InvalidStateTransitionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      InvalidStateTransitionException,
      __BaseException
    >
  );
}
export declare class OperationStatusCheckFailedException extends __BaseException {
  readonly name: "OperationStatusCheckFailedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      OperationStatusCheckFailedException,
      __BaseException
    >
  );
}
export declare enum OperationStatus {
  FAILED = "FAILED",
  IN_PROGRESS = "IN_PROGRESS",
  PENDING = "PENDING",
  SUCCESS = "SUCCESS",
}
export declare enum HandlerErrorCode {
  AccessDenied = "AccessDenied",
  AlreadyExists = "AlreadyExists",
  GeneralServiceException = "GeneralServiceException",
  HandlerInternalFailure = "HandlerInternalFailure",
  InternalFailure = "InternalFailure",
  InvalidCredentials = "InvalidCredentials",
  InvalidRequest = "InvalidRequest",
  InvalidTypeConfiguration = "InvalidTypeConfiguration",
  NetworkFailure = "NetworkFailure",
  NonCompliant = "NonCompliant",
  NotFound = "NotFound",
  NotUpdatable = "NotUpdatable",
  ResourceConflict = "ResourceConflict",
  ServiceInternalError = "ServiceInternalError",
  ServiceLimitExceeded = "ServiceLimitExceeded",
  ServiceTimeout = "NotStabilized",
  Throttling = "Throttling",
  Unknown = "Unknown",
  UnsupportedTarget = "UnsupportedTarget",
}
export interface RecordHandlerProgressInput {
  BearerToken: string | undefined;
  OperationStatus: OperationStatus | string | undefined;
  CurrentOperationStatus?: OperationStatus | string;
  StatusMessage?: string;
  ErrorCode?: HandlerErrorCode | string;
  ResourceModel?: string;
  ClientRequestToken?: string;
}
export interface RecordHandlerProgressOutput {}
export interface RegisterPublisherInput {
  AcceptTermsAndConditions?: boolean;
  ConnectionArn?: string;
}
export interface RegisterPublisherOutput {
  PublisherId?: string;
}
export interface RegisterTypeInput {
  Type?: RegistryType | string;
  TypeName: string | undefined;
  SchemaHandlerPackage: string | undefined;
  LoggingConfig?: LoggingConfig;
  ExecutionRoleArn?: string;
  ClientRequestToken?: string;
}
export interface RegisterTypeOutput {
  RegistrationToken?: string;
}
export interface RollbackStackInput {
  StackName: string | undefined;
  RoleARN?: string;
  ClientRequestToken?: string;
}
export interface RollbackStackOutput {
  StackId?: string;
}
export interface SetStackPolicyInput {
  StackName: string | undefined;
  StackPolicyBody?: string;
  StackPolicyURL?: string;
}
export interface SetTypeConfigurationInput {
  TypeArn?: string;
  Configuration: string | undefined;
  ConfigurationAlias?: string;
  TypeName?: string;
  Type?: ThirdPartyType | string;
}
export interface SetTypeConfigurationOutput {
  ConfigurationArn?: string;
}
export interface SetTypeDefaultVersionInput {
  Arn?: string;
  Type?: RegistryType | string;
  TypeName?: string;
  VersionId?: string;
}
export interface SetTypeDefaultVersionOutput {}
export declare enum ResourceSignalStatus {
  FAILURE = "FAILURE",
  SUCCESS = "SUCCESS",
}
export interface SignalResourceInput {
  StackName: string | undefined;
  LogicalResourceId: string | undefined;
  UniqueId: string | undefined;
  Status: ResourceSignalStatus | string | undefined;
}
export interface StopStackSetOperationInput {
  StackSetName: string | undefined;
  OperationId: string | undefined;
  CallAs?: CallAs | string;
}
export interface StopStackSetOperationOutput {}
export interface TestTypeInput {
  Arn?: string;
  Type?: ThirdPartyType | string;
  TypeName?: string;
  VersionId?: string;
  LogDeliveryBucket?: string;
}
export interface TestTypeOutput {
  TypeVersionArn?: string;
}
export interface UpdateStackInput {
  StackName: string | undefined;
  TemplateBody?: string;
  TemplateURL?: string;
  UsePreviousTemplate?: boolean;
  StackPolicyDuringUpdateBody?: string;
  StackPolicyDuringUpdateURL?: string;
  Parameters?: Parameter[];
  Capabilities?: (Capability | string)[];
  ResourceTypes?: string[];
  RoleARN?: string;
  RollbackConfiguration?: RollbackConfiguration;
  StackPolicyBody?: string;
  StackPolicyURL?: string;
  NotificationARNs?: string[];
  Tags?: Tag[];
  DisableRollback?: boolean;
  ClientRequestToken?: string;
}
export interface UpdateStackOutput {
  StackId?: string;
}
export interface UpdateStackInstancesInput {
  StackSetName: string | undefined;
  Accounts?: string[];
  DeploymentTargets?: DeploymentTargets;
  Regions: string[] | undefined;
  ParameterOverrides?: Parameter[];
  OperationPreferences?: StackSetOperationPreferences;
  OperationId?: string;
  CallAs?: CallAs | string;
}
export interface UpdateStackInstancesOutput {
  OperationId?: string;
}
export interface UpdateStackSetInput {
  StackSetName: string | undefined;
  Description?: string;
  TemplateBody?: string;
  TemplateURL?: string;
  UsePreviousTemplate?: boolean;
  Parameters?: Parameter[];
  Capabilities?: (Capability | string)[];
  Tags?: Tag[];
  OperationPreferences?: StackSetOperationPreferences;
  AdministrationRoleARN?: string;
  ExecutionRoleName?: string;
  DeploymentTargets?: DeploymentTargets;
  PermissionModel?: PermissionModels | string;
  AutoDeployment?: AutoDeployment;
  OperationId?: string;
  Accounts?: string[];
  Regions?: string[];
  CallAs?: CallAs | string;
  ManagedExecution?: ManagedExecution;
}
export interface UpdateStackSetOutput {
  OperationId?: string;
}
export interface UpdateTerminationProtectionInput {
  EnableTerminationProtection: boolean | undefined;
  StackName: string | undefined;
}
export interface UpdateTerminationProtectionOutput {
  StackId?: string;
}
export interface ValidateTemplateInput {
  TemplateBody?: string;
  TemplateURL?: string;
}
export interface TemplateParameter {
  ParameterKey?: string;
  DefaultValue?: string;
  NoEcho?: boolean;
  Description?: string;
}
export interface ValidateTemplateOutput {
  Parameters?: TemplateParameter[];
  Description?: string;
  Capabilities?: (Capability | string)[];
  CapabilitiesReason?: string;
  DeclaredTransforms?: string[];
}
export declare const AccountGateResultFilterSensitiveLog: (
  obj: AccountGateResult
) => any;
export declare const AccountLimitFilterSensitiveLog: (obj: AccountLimit) => any;
export declare const LoggingConfigFilterSensitiveLog: (
  obj: LoggingConfig
) => any;
export declare const ActivateTypeInputFilterSensitiveLog: (
  obj: ActivateTypeInput
) => any;
export declare const ActivateTypeOutputFilterSensitiveLog: (
  obj: ActivateTypeOutput
) => any;
export declare const AutoDeploymentFilterSensitiveLog: (
  obj: AutoDeployment
) => any;
export declare const TypeConfigurationIdentifierFilterSensitiveLog: (
  obj: TypeConfigurationIdentifier
) => any;
export declare const BatchDescribeTypeConfigurationsInputFilterSensitiveLog: (
  obj: BatchDescribeTypeConfigurationsInput
) => any;
export declare const BatchDescribeTypeConfigurationsErrorFilterSensitiveLog: (
  obj: BatchDescribeTypeConfigurationsError
) => any;
export declare const TypeConfigurationDetailsFilterSensitiveLog: (
  obj: TypeConfigurationDetails
) => any;
export declare const BatchDescribeTypeConfigurationsOutputFilterSensitiveLog: (
  obj: BatchDescribeTypeConfigurationsOutput
) => any;
export declare const CancelUpdateStackInputFilterSensitiveLog: (
  obj: CancelUpdateStackInput
) => any;
export declare const ResourceTargetDefinitionFilterSensitiveLog: (
  obj: ResourceTargetDefinition
) => any;
export declare const ResourceChangeDetailFilterSensitiveLog: (
  obj: ResourceChangeDetail
) => any;
export declare const ModuleInfoFilterSensitiveLog: (obj: ModuleInfo) => any;
export declare const ResourceChangeFilterSensitiveLog: (
  obj: ResourceChange
) => any;
export declare const ChangeFilterSensitiveLog: (obj: Change) => any;
export declare const ChangeSetHookResourceTargetDetailsFilterSensitiveLog: (
  obj: ChangeSetHookResourceTargetDetails
) => any;
export declare const ChangeSetHookTargetDetailsFilterSensitiveLog: (
  obj: ChangeSetHookTargetDetails
) => any;
export declare const ChangeSetHookFilterSensitiveLog: (
  obj: ChangeSetHook
) => any;
export declare const ChangeSetSummaryFilterSensitiveLog: (
  obj: ChangeSetSummary
) => any;
export declare const ContinueUpdateRollbackInputFilterSensitiveLog: (
  obj: ContinueUpdateRollbackInput
) => any;
export declare const ContinueUpdateRollbackOutputFilterSensitiveLog: (
  obj: ContinueUpdateRollbackOutput
) => any;
export declare const ParameterFilterSensitiveLog: (obj: Parameter) => any;
export declare const ResourceToImportFilterSensitiveLog: (
  obj: ResourceToImport
) => any;
export declare const RollbackTriggerFilterSensitiveLog: (
  obj: RollbackTrigger
) => any;
export declare const RollbackConfigurationFilterSensitiveLog: (
  obj: RollbackConfiguration
) => any;
export declare const TagFilterSensitiveLog: (obj: Tag) => any;
export declare const CreateChangeSetInputFilterSensitiveLog: (
  obj: CreateChangeSetInput
) => any;
export declare const CreateChangeSetOutputFilterSensitiveLog: (
  obj: CreateChangeSetOutput
) => any;
export declare const CreateStackInputFilterSensitiveLog: (
  obj: CreateStackInput
) => any;
export declare const CreateStackOutputFilterSensitiveLog: (
  obj: CreateStackOutput
) => any;
export declare const DeploymentTargetsFilterSensitiveLog: (
  obj: DeploymentTargets
) => any;
export declare const StackSetOperationPreferencesFilterSensitiveLog: (
  obj: StackSetOperationPreferences
) => any;
export declare const CreateStackInstancesInputFilterSensitiveLog: (
  obj: CreateStackInstancesInput
) => any;
export declare const CreateStackInstancesOutputFilterSensitiveLog: (
  obj: CreateStackInstancesOutput
) => any;
export declare const ManagedExecutionFilterSensitiveLog: (
  obj: ManagedExecution
) => any;
export declare const CreateStackSetInputFilterSensitiveLog: (
  obj: CreateStackSetInput
) => any;
export declare const CreateStackSetOutputFilterSensitiveLog: (
  obj: CreateStackSetOutput
) => any;
export declare const DeactivateTypeInputFilterSensitiveLog: (
  obj: DeactivateTypeInput
) => any;
export declare const DeactivateTypeOutputFilterSensitiveLog: (
  obj: DeactivateTypeOutput
) => any;
export declare const DeleteChangeSetInputFilterSensitiveLog: (
  obj: DeleteChangeSetInput
) => any;
export declare const DeleteChangeSetOutputFilterSensitiveLog: (
  obj: DeleteChangeSetOutput
) => any;
export declare const DeleteStackInputFilterSensitiveLog: (
  obj: DeleteStackInput
) => any;
export declare const DeleteStackInstancesInputFilterSensitiveLog: (
  obj: DeleteStackInstancesInput
) => any;
export declare const DeleteStackInstancesOutputFilterSensitiveLog: (
  obj: DeleteStackInstancesOutput
) => any;
export declare const DeleteStackSetInputFilterSensitiveLog: (
  obj: DeleteStackSetInput
) => any;
export declare const DeleteStackSetOutputFilterSensitiveLog: (
  obj: DeleteStackSetOutput
) => any;
export declare const DeregisterTypeInputFilterSensitiveLog: (
  obj: DeregisterTypeInput
) => any;
export declare const DeregisterTypeOutputFilterSensitiveLog: (
  obj: DeregisterTypeOutput
) => any;
export declare const DescribeAccountLimitsInputFilterSensitiveLog: (
  obj: DescribeAccountLimitsInput
) => any;
export declare const DescribeAccountLimitsOutputFilterSensitiveLog: (
  obj: DescribeAccountLimitsOutput
) => any;
export declare const DescribeChangeSetInputFilterSensitiveLog: (
  obj: DescribeChangeSetInput
) => any;
export declare const DescribeChangeSetOutputFilterSensitiveLog: (
  obj: DescribeChangeSetOutput
) => any;
export declare const DescribeChangeSetHooksInputFilterSensitiveLog: (
  obj: DescribeChangeSetHooksInput
) => any;
export declare const DescribeChangeSetHooksOutputFilterSensitiveLog: (
  obj: DescribeChangeSetHooksOutput
) => any;
export declare const DescribePublisherInputFilterSensitiveLog: (
  obj: DescribePublisherInput
) => any;
export declare const DescribePublisherOutputFilterSensitiveLog: (
  obj: DescribePublisherOutput
) => any;
export declare const DescribeStackDriftDetectionStatusInputFilterSensitiveLog: (
  obj: DescribeStackDriftDetectionStatusInput
) => any;
export declare const DescribeStackDriftDetectionStatusOutputFilterSensitiveLog: (
  obj: DescribeStackDriftDetectionStatusOutput
) => any;
export declare const DescribeStackEventsInputFilterSensitiveLog: (
  obj: DescribeStackEventsInput
) => any;
export declare const StackEventFilterSensitiveLog: (obj: StackEvent) => any;
export declare const DescribeStackEventsOutputFilterSensitiveLog: (
  obj: DescribeStackEventsOutput
) => any;
export declare const DescribeStackInstanceInputFilterSensitiveLog: (
  obj: DescribeStackInstanceInput
) => any;
export declare const StackInstanceComprehensiveStatusFilterSensitiveLog: (
  obj: StackInstanceComprehensiveStatus
) => any;
export declare const StackInstanceFilterSensitiveLog: (
  obj: StackInstance
) => any;
export declare const DescribeStackInstanceOutputFilterSensitiveLog: (
  obj: DescribeStackInstanceOutput
) => any;
export declare const DescribeStackResourceInputFilterSensitiveLog: (
  obj: DescribeStackResourceInput
) => any;
export declare const StackResourceDriftInformationFilterSensitiveLog: (
  obj: StackResourceDriftInformation
) => any;
export declare const StackResourceDetailFilterSensitiveLog: (
  obj: StackResourceDetail
) => any;
export declare const DescribeStackResourceOutputFilterSensitiveLog: (
  obj: DescribeStackResourceOutput
) => any;
export declare const DescribeStackResourceDriftsInputFilterSensitiveLog: (
  obj: DescribeStackResourceDriftsInput
) => any;
export declare const PhysicalResourceIdContextKeyValuePairFilterSensitiveLog: (
  obj: PhysicalResourceIdContextKeyValuePair
) => any;
export declare const PropertyDifferenceFilterSensitiveLog: (
  obj: PropertyDifference
) => any;
export declare const StackResourceDriftFilterSensitiveLog: (
  obj: StackResourceDrift
) => any;
export declare const DescribeStackResourceDriftsOutputFilterSensitiveLog: (
  obj: DescribeStackResourceDriftsOutput
) => any;
export declare const DescribeStackResourcesInputFilterSensitiveLog: (
  obj: DescribeStackResourcesInput
) => any;
export declare const StackResourceFilterSensitiveLog: (
  obj: StackResource
) => any;
export declare const DescribeStackResourcesOutputFilterSensitiveLog: (
  obj: DescribeStackResourcesOutput
) => any;
export declare const DescribeStacksInputFilterSensitiveLog: (
  obj: DescribeStacksInput
) => any;
export declare const StackDriftInformationFilterSensitiveLog: (
  obj: StackDriftInformation
) => any;
export declare const OutputFilterSensitiveLog: (obj: Output) => any;
export declare const StackFilterSensitiveLog: (obj: Stack) => any;
export declare const DescribeStacksOutputFilterSensitiveLog: (
  obj: DescribeStacksOutput
) => any;
export declare const DescribeStackSetInputFilterSensitiveLog: (
  obj: DescribeStackSetInput
) => any;
export declare const StackSetDriftDetectionDetailsFilterSensitiveLog: (
  obj: StackSetDriftDetectionDetails
) => any;
export declare const StackSetFilterSensitiveLog: (obj: StackSet) => any;
export declare const DescribeStackSetOutputFilterSensitiveLog: (
  obj: DescribeStackSetOutput
) => any;
export declare const DescribeStackSetOperationInputFilterSensitiveLog: (
  obj: DescribeStackSetOperationInput
) => any;
export declare const StackSetOperationStatusDetailsFilterSensitiveLog: (
  obj: StackSetOperationStatusDetails
) => any;
export declare const StackSetOperationFilterSensitiveLog: (
  obj: StackSetOperation
) => any;
export declare const DescribeStackSetOperationOutputFilterSensitiveLog: (
  obj: DescribeStackSetOperationOutput
) => any;
export declare const DescribeTypeInputFilterSensitiveLog: (
  obj: DescribeTypeInput
) => any;
export declare const RequiredActivatedTypeFilterSensitiveLog: (
  obj: RequiredActivatedType
) => any;
export declare const DescribeTypeOutputFilterSensitiveLog: (
  obj: DescribeTypeOutput
) => any;
export declare const DescribeTypeRegistrationInputFilterSensitiveLog: (
  obj: DescribeTypeRegistrationInput
) => any;
export declare const DescribeTypeRegistrationOutputFilterSensitiveLog: (
  obj: DescribeTypeRegistrationOutput
) => any;
export declare const DetectStackDriftInputFilterSensitiveLog: (
  obj: DetectStackDriftInput
) => any;
export declare const DetectStackDriftOutputFilterSensitiveLog: (
  obj: DetectStackDriftOutput
) => any;
export declare const DetectStackResourceDriftInputFilterSensitiveLog: (
  obj: DetectStackResourceDriftInput
) => any;
export declare const DetectStackResourceDriftOutputFilterSensitiveLog: (
  obj: DetectStackResourceDriftOutput
) => any;
export declare const DetectStackSetDriftInputFilterSensitiveLog: (
  obj: DetectStackSetDriftInput
) => any;
export declare const DetectStackSetDriftOutputFilterSensitiveLog: (
  obj: DetectStackSetDriftOutput
) => any;
export declare const EstimateTemplateCostInputFilterSensitiveLog: (
  obj: EstimateTemplateCostInput
) => any;
export declare const EstimateTemplateCostOutputFilterSensitiveLog: (
  obj: EstimateTemplateCostOutput
) => any;
export declare const ExecuteChangeSetInputFilterSensitiveLog: (
  obj: ExecuteChangeSetInput
) => any;
export declare const ExecuteChangeSetOutputFilterSensitiveLog: (
  obj: ExecuteChangeSetOutput
) => any;
export declare const GetStackPolicyInputFilterSensitiveLog: (
  obj: GetStackPolicyInput
) => any;
export declare const GetStackPolicyOutputFilterSensitiveLog: (
  obj: GetStackPolicyOutput
) => any;
export declare const GetTemplateInputFilterSensitiveLog: (
  obj: GetTemplateInput
) => any;
export declare const GetTemplateOutputFilterSensitiveLog: (
  obj: GetTemplateOutput
) => any;
export declare const GetTemplateSummaryInputFilterSensitiveLog: (
  obj: GetTemplateSummaryInput
) => any;
export declare const ParameterConstraintsFilterSensitiveLog: (
  obj: ParameterConstraints
) => any;
export declare const ParameterDeclarationFilterSensitiveLog: (
  obj: ParameterDeclaration
) => any;
export declare const ResourceIdentifierSummaryFilterSensitiveLog: (
  obj: ResourceIdentifierSummary
) => any;
export declare const GetTemplateSummaryOutputFilterSensitiveLog: (
  obj: GetTemplateSummaryOutput
) => any;
export declare const ImportStacksToStackSetInputFilterSensitiveLog: (
  obj: ImportStacksToStackSetInput
) => any;
export declare const ImportStacksToStackSetOutputFilterSensitiveLog: (
  obj: ImportStacksToStackSetOutput
) => any;
export declare const ListChangeSetsInputFilterSensitiveLog: (
  obj: ListChangeSetsInput
) => any;
export declare const ListChangeSetsOutputFilterSensitiveLog: (
  obj: ListChangeSetsOutput
) => any;
export declare const ListExportsInputFilterSensitiveLog: (
  obj: ListExportsInput
) => any;
export declare const ExportFilterSensitiveLog: (obj: Export) => any;
export declare const ListExportsOutputFilterSensitiveLog: (
  obj: ListExportsOutput
) => any;
export declare const ListImportsInputFilterSensitiveLog: (
  obj: ListImportsInput
) => any;
export declare const ListImportsOutputFilterSensitiveLog: (
  obj: ListImportsOutput
) => any;
export declare const StackInstanceFilterFilterSensitiveLog: (
  obj: StackInstanceFilter
) => any;
export declare const ListStackInstancesInputFilterSensitiveLog: (
  obj: ListStackInstancesInput
) => any;
export declare const StackInstanceSummaryFilterSensitiveLog: (
  obj: StackInstanceSummary
) => any;
export declare const ListStackInstancesOutputFilterSensitiveLog: (
  obj: ListStackInstancesOutput
) => any;
export declare const ListStackResourcesInputFilterSensitiveLog: (
  obj: ListStackResourcesInput
) => any;
export declare const StackResourceDriftInformationSummaryFilterSensitiveLog: (
  obj: StackResourceDriftInformationSummary
) => any;
export declare const StackResourceSummaryFilterSensitiveLog: (
  obj: StackResourceSummary
) => any;
export declare const ListStackResourcesOutputFilterSensitiveLog: (
  obj: ListStackResourcesOutput
) => any;
export declare const ListStacksInputFilterSensitiveLog: (
  obj: ListStacksInput
) => any;
export declare const StackDriftInformationSummaryFilterSensitiveLog: (
  obj: StackDriftInformationSummary
) => any;
export declare const StackSummaryFilterSensitiveLog: (obj: StackSummary) => any;
export declare const ListStacksOutputFilterSensitiveLog: (
  obj: ListStacksOutput
) => any;
export declare const OperationResultFilterFilterSensitiveLog: (
  obj: OperationResultFilter
) => any;
export declare const ListStackSetOperationResultsInputFilterSensitiveLog: (
  obj: ListStackSetOperationResultsInput
) => any;
export declare const StackSetOperationResultSummaryFilterSensitiveLog: (
  obj: StackSetOperationResultSummary
) => any;
export declare const ListStackSetOperationResultsOutputFilterSensitiveLog: (
  obj: ListStackSetOperationResultsOutput
) => any;
export declare const ListStackSetOperationsInputFilterSensitiveLog: (
  obj: ListStackSetOperationsInput
) => any;
export declare const StackSetOperationSummaryFilterSensitiveLog: (
  obj: StackSetOperationSummary
) => any;
export declare const ListStackSetOperationsOutputFilterSensitiveLog: (
  obj: ListStackSetOperationsOutput
) => any;
export declare const ListStackSetsInputFilterSensitiveLog: (
  obj: ListStackSetsInput
) => any;
export declare const StackSetSummaryFilterSensitiveLog: (
  obj: StackSetSummary
) => any;
export declare const ListStackSetsOutputFilterSensitiveLog: (
  obj: ListStackSetsOutput
) => any;
export declare const ListTypeRegistrationsInputFilterSensitiveLog: (
  obj: ListTypeRegistrationsInput
) => any;
export declare const ListTypeRegistrationsOutputFilterSensitiveLog: (
  obj: ListTypeRegistrationsOutput
) => any;
export declare const TypeFiltersFilterSensitiveLog: (obj: TypeFilters) => any;
export declare const ListTypesInputFilterSensitiveLog: (
  obj: ListTypesInput
) => any;
export declare const TypeSummaryFilterSensitiveLog: (obj: TypeSummary) => any;
export declare const ListTypesOutputFilterSensitiveLog: (
  obj: ListTypesOutput
) => any;
export declare const ListTypeVersionsInputFilterSensitiveLog: (
  obj: ListTypeVersionsInput
) => any;
export declare const TypeVersionSummaryFilterSensitiveLog: (
  obj: TypeVersionSummary
) => any;
export declare const ListTypeVersionsOutputFilterSensitiveLog: (
  obj: ListTypeVersionsOutput
) => any;
export declare const PublishTypeInputFilterSensitiveLog: (
  obj: PublishTypeInput
) => any;
export declare const PublishTypeOutputFilterSensitiveLog: (
  obj: PublishTypeOutput
) => any;
export declare const RecordHandlerProgressInputFilterSensitiveLog: (
  obj: RecordHandlerProgressInput
) => any;
export declare const RecordHandlerProgressOutputFilterSensitiveLog: (
  obj: RecordHandlerProgressOutput
) => any;
export declare const RegisterPublisherInputFilterSensitiveLog: (
  obj: RegisterPublisherInput
) => any;
export declare const RegisterPublisherOutputFilterSensitiveLog: (
  obj: RegisterPublisherOutput
) => any;
export declare const RegisterTypeInputFilterSensitiveLog: (
  obj: RegisterTypeInput
) => any;
export declare const RegisterTypeOutputFilterSensitiveLog: (
  obj: RegisterTypeOutput
) => any;
export declare const RollbackStackInputFilterSensitiveLog: (
  obj: RollbackStackInput
) => any;
export declare const RollbackStackOutputFilterSensitiveLog: (
  obj: RollbackStackOutput
) => any;
export declare const SetStackPolicyInputFilterSensitiveLog: (
  obj: SetStackPolicyInput
) => any;
export declare const SetTypeConfigurationInputFilterSensitiveLog: (
  obj: SetTypeConfigurationInput
) => any;
export declare const SetTypeConfigurationOutputFilterSensitiveLog: (
  obj: SetTypeConfigurationOutput
) => any;
export declare const SetTypeDefaultVersionInputFilterSensitiveLog: (
  obj: SetTypeDefaultVersionInput
) => any;
export declare const SetTypeDefaultVersionOutputFilterSensitiveLog: (
  obj: SetTypeDefaultVersionOutput
) => any;
export declare const SignalResourceInputFilterSensitiveLog: (
  obj: SignalResourceInput
) => any;
export declare const StopStackSetOperationInputFilterSensitiveLog: (
  obj: StopStackSetOperationInput
) => any;
export declare const StopStackSetOperationOutputFilterSensitiveLog: (
  obj: StopStackSetOperationOutput
) => any;
export declare const TestTypeInputFilterSensitiveLog: (
  obj: TestTypeInput
) => any;
export declare const TestTypeOutputFilterSensitiveLog: (
  obj: TestTypeOutput
) => any;
export declare const UpdateStackInputFilterSensitiveLog: (
  obj: UpdateStackInput
) => any;
export declare const UpdateStackOutputFilterSensitiveLog: (
  obj: UpdateStackOutput
) => any;
export declare const UpdateStackInstancesInputFilterSensitiveLog: (
  obj: UpdateStackInstancesInput
) => any;
export declare const UpdateStackInstancesOutputFilterSensitiveLog: (
  obj: UpdateStackInstancesOutput
) => any;
export declare const UpdateStackSetInputFilterSensitiveLog: (
  obj: UpdateStackSetInput
) => any;
export declare const UpdateStackSetOutputFilterSensitiveLog: (
  obj: UpdateStackSetOutput
) => any;
export declare const UpdateTerminationProtectionInputFilterSensitiveLog: (
  obj: UpdateTerminationProtectionInput
) => any;
export declare const UpdateTerminationProtectionOutputFilterSensitiveLog: (
  obj: UpdateTerminationProtectionOutput
) => any;
export declare const ValidateTemplateInputFilterSensitiveLog: (
  obj: ValidateTemplateInput
) => any;
export declare const TemplateParameterFilterSensitiveLog: (
  obj: TemplateParameter
) => any;
export declare const ValidateTemplateOutputFilterSensitiveLog: (
  obj: ValidateTemplateOutput
) => any;
