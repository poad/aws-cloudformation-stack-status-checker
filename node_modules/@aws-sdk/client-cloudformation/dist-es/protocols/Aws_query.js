import { HttpRequest as __HttpRequest } from "@aws-sdk/protocol-http";
import { decorateServiceException as __decorateServiceException, expectNonNull as __expectNonNull, expectString as __expectString, extendedEncodeURIComponent as __extendedEncodeURIComponent, getArrayIfSingleItem as __getArrayIfSingleItem, getValueFromTextNode as __getValueFromTextNode, parseBoolean as __parseBoolean, parseRfc3339DateTimeWithOffset as __parseRfc3339DateTimeWithOffset, strictParseInt32 as __strictParseInt32, throwDefaultError, } from "@aws-sdk/smithy-client";
import { XMLParser } from "fast-xml-parser";
import { v4 as generateIdempotencyToken } from "uuid";
import { CloudFormationServiceException as __BaseException } from "../models/CloudFormationServiceException";
import { AlreadyExistsException, CFNRegistryException, ChangeSetNotFoundException, CreatedButModifiedException, InsufficientCapabilitiesException, InvalidChangeSetStatusException, InvalidOperationException, InvalidStateTransitionException, LimitExceededException, NameAlreadyExistsException, OperationIdAlreadyExistsException, OperationInProgressException, OperationNotFoundException, OperationStatusCheckFailedException, StackInstanceNotFoundException, StackNotFoundException, StackSetNotEmptyException, StackSetNotFoundException, StaleRequestException, TokenAlreadyExistsException, TypeConfigurationNotFoundException, TypeNotFoundException, } from "../models/models_0";
export const serializeAws_queryActivateTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryActivateTypeInput(input, context),
        Action: "ActivateType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryBatchDescribeTypeConfigurationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryBatchDescribeTypeConfigurationsInput(input, context),
        Action: "BatchDescribeTypeConfigurations",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCancelUpdateStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCancelUpdateStackInput(input, context),
        Action: "CancelUpdateStack",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryContinueUpdateRollbackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryContinueUpdateRollbackInput(input, context),
        Action: "ContinueUpdateRollback",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateChangeSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateChangeSetInput(input, context),
        Action: "CreateChangeSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackInput(input, context),
        Action: "CreateStack",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateStackInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackInstancesInput(input, context),
        Action: "CreateStackInstances",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryCreateStackSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryCreateStackSetInput(input, context),
        Action: "CreateStackSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeactivateTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeactivateTypeInput(input, context),
        Action: "DeactivateType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteChangeSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteChangeSetInput(input, context),
        Action: "DeleteChangeSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackInput(input, context),
        Action: "DeleteStack",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteStackInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackInstancesInput(input, context),
        Action: "DeleteStackInstances",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeleteStackSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeleteStackSetInput(input, context),
        Action: "DeleteStackSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDeregisterTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDeregisterTypeInput(input, context),
        Action: "DeregisterType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeAccountLimitsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeAccountLimitsInput(input, context),
        Action: "DescribeAccountLimits",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeChangeSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeChangeSetInput(input, context),
        Action: "DescribeChangeSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeChangeSetHooksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeChangeSetHooksInput(input, context),
        Action: "DescribeChangeSetHooks",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribePublisherCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribePublisherInput(input, context),
        Action: "DescribePublisher",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackDriftDetectionStatusCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackDriftDetectionStatusInput(input, context),
        Action: "DescribeStackDriftDetectionStatus",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackEventsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackEventsInput(input, context),
        Action: "DescribeStackEvents",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackInstanceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackInstanceInput(input, context),
        Action: "DescribeStackInstance",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourceInput(input, context),
        Action: "DescribeStackResource",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackResourceDriftsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourceDriftsInput(input, context),
        Action: "DescribeStackResourceDrifts",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackResourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackResourcesInput(input, context),
        Action: "DescribeStackResources",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStacksInput(input, context),
        Action: "DescribeStacks",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackSetInput(input, context),
        Action: "DescribeStackSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeStackSetOperationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeStackSetOperationInput(input, context),
        Action: "DescribeStackSetOperation",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTypeInput(input, context),
        Action: "DescribeType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDescribeTypeRegistrationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDescribeTypeRegistrationInput(input, context),
        Action: "DescribeTypeRegistration",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDetectStackDriftCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackDriftInput(input, context),
        Action: "DetectStackDrift",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDetectStackResourceDriftCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackResourceDriftInput(input, context),
        Action: "DetectStackResourceDrift",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryDetectStackSetDriftCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryDetectStackSetDriftInput(input, context),
        Action: "DetectStackSetDrift",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryEstimateTemplateCostCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryEstimateTemplateCostInput(input, context),
        Action: "EstimateTemplateCost",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryExecuteChangeSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryExecuteChangeSetInput(input, context),
        Action: "ExecuteChangeSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetStackPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetStackPolicyInput(input, context),
        Action: "GetStackPolicy",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetTemplateInput(input, context),
        Action: "GetTemplate",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryGetTemplateSummaryCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryGetTemplateSummaryInput(input, context),
        Action: "GetTemplateSummary",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryImportStacksToStackSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryImportStacksToStackSetInput(input, context),
        Action: "ImportStacksToStackSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListChangeSetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListChangeSetsInput(input, context),
        Action: "ListChangeSets",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListExportsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListExportsInput(input, context),
        Action: "ListExports",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListImportsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListImportsInput(input, context),
        Action: "ListImports",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStackInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStackInstancesInput(input, context),
        Action: "ListStackInstances",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStackResourcesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStackResourcesInput(input, context),
        Action: "ListStackResources",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStacksCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStacksInput(input, context),
        Action: "ListStacks",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStackSetOperationResultsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetOperationResultsInput(input, context),
        Action: "ListStackSetOperationResults",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStackSetOperationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetOperationsInput(input, context),
        Action: "ListStackSetOperations",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListStackSetsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListStackSetsInput(input, context),
        Action: "ListStackSets",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListTypeRegistrationsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTypeRegistrationsInput(input, context),
        Action: "ListTypeRegistrations",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListTypesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTypesInput(input, context),
        Action: "ListTypes",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryListTypeVersionsCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryListTypeVersionsInput(input, context),
        Action: "ListTypeVersions",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryPublishTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryPublishTypeInput(input, context),
        Action: "PublishType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRecordHandlerProgressCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRecordHandlerProgressInput(input, context),
        Action: "RecordHandlerProgress",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRegisterPublisherCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRegisterPublisherInput(input, context),
        Action: "RegisterPublisher",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRegisterTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRegisterTypeInput(input, context),
        Action: "RegisterType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryRollbackStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryRollbackStackInput(input, context),
        Action: "RollbackStack",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetStackPolicyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetStackPolicyInput(input, context),
        Action: "SetStackPolicy",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetTypeConfigurationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetTypeConfigurationInput(input, context),
        Action: "SetTypeConfiguration",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySetTypeDefaultVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySetTypeDefaultVersionInput(input, context),
        Action: "SetTypeDefaultVersion",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_querySignalResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_querySignalResourceInput(input, context),
        Action: "SignalResource",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryStopStackSetOperationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryStopStackSetOperationInput(input, context),
        Action: "StopStackSetOperation",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryTestTypeCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryTestTypeInput(input, context),
        Action: "TestType",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateStackCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackInput(input, context),
        Action: "UpdateStack",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateStackInstancesCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackInstancesInput(input, context),
        Action: "UpdateStackInstances",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateStackSetCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateStackSetInput(input, context),
        Action: "UpdateStackSet",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryUpdateTerminationProtectionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryUpdateTerminationProtectionInput(input, context),
        Action: "UpdateTerminationProtection",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const serializeAws_queryValidateTemplateCommand = async (input, context) => {
    const headers = {
        "content-type": "application/x-www-form-urlencoded",
    };
    let body;
    body = buildFormUrlencodedString({
        ...serializeAws_queryValidateTemplateInput(input, context),
        Action: "ValidateTemplate",
        Version: "2010-05-15",
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
export const deserializeAws_queryActivateTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryActivateTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryActivateTypeOutput(data.ActivateTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryActivateTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryBatchDescribeTypeConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryBatchDescribeTypeConfigurationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryBatchDescribeTypeConfigurationsOutput(data.BatchDescribeTypeConfigurationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryBatchDescribeTypeConfigurationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeConfigurationNotFoundException":
        case "com.amazonaws.cloudformation#TypeConfigurationNotFoundException":
            throw await deserializeAws_queryTypeConfigurationNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCancelUpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCancelUpdateStackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCancelUpdateStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryContinueUpdateRollbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryContinueUpdateRollbackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryContinueUpdateRollbackOutput(data.ContinueUpdateRollbackResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryContinueUpdateRollbackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateChangeSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateChangeSetOutput(data.CreateChangeSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateChangeSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
            throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateStackOutput(data.CreateStackResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "AlreadyExistsException":
        case "com.amazonaws.cloudformation#AlreadyExistsException":
            throw await deserializeAws_queryAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
            throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateStackInstancesOutput(data.CreateStackInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateStackInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryCreateStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryCreateStackSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryCreateStackSetOutput(data.CreateStackSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryCreateStackSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CreatedButModifiedException":
        case "com.amazonaws.cloudformation#CreatedButModifiedException":
            throw await deserializeAws_queryCreatedButModifiedExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "NameAlreadyExistsException":
        case "com.amazonaws.cloudformation#NameAlreadyExistsException":
            throw await deserializeAws_queryNameAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeactivateTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeactivateTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeactivateTypeOutput(data.DeactivateTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeactivateTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteChangeSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteChangeSetOutput(data.DeleteChangeSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteChangeSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
            throw await deserializeAws_queryInvalidChangeSetStatusExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteStackInstancesOutput(data.DeleteStackInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteStackInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeleteStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeleteStackSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeleteStackSetOutput(data.DeleteStackSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeleteStackSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotEmptyException":
        case "com.amazonaws.cloudformation#StackSetNotEmptyException":
            throw await deserializeAws_queryStackSetNotEmptyExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDeregisterTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDeregisterTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDeregisterTypeOutput(data.DeregisterTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDeregisterTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeAccountLimitsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeAccountLimitsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeAccountLimitsOutput(data.DescribeAccountLimitsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeAccountLimitsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeChangeSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeChangeSetOutput(data.DescribeChangeSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeChangeSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
            throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeChangeSetHooksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeChangeSetHooksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeChangeSetHooksOutput(data.DescribeChangeSetHooksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeChangeSetHooksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
            throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribePublisherCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribePublisherCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribePublisherOutput(data.DescribePublisherResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribePublisherCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeStackDriftDetectionStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackDriftDetectionStatusCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackDriftDetectionStatusOutput(data.DescribeStackDriftDetectionStatusResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackDriftDetectionStatusCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStackEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackEventsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackEventsOutput(data.DescribeStackEventsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackEventsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStackInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackInstanceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackInstanceOutput(data.DescribeStackInstanceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackInstanceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
            throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeStackResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourceCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackResourceOutput(data.DescribeStackResourceResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStackResourceDriftsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourceDriftsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackResourceDriftsOutput(data.DescribeStackResourceDriftsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackResourceDriftsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStackResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackResourcesOutput(data.DescribeStackResourcesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStacksOutput(data.DescribeStacksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDescribeStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackSetOutput(data.DescribeStackSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeStackSetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeStackSetOperationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeStackSetOperationOutput(data.DescribeStackSetOperationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeStackSetOperationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
            throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeTypeOutput(data.DescribeTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDescribeTypeRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDescribeTypeRegistrationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDescribeTypeRegistrationOutput(data.DescribeTypeRegistrationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDescribeTypeRegistrationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryDetectStackDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackDriftCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetectStackDriftOutput(data.DetectStackDriftResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDetectStackDriftCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDetectStackResourceDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackResourceDriftCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetectStackResourceDriftOutput(data.DetectStackResourceDriftResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDetectStackResourceDriftCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryDetectStackSetDriftCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryDetectStackSetDriftCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryDetectStackSetDriftOutput(data.DetectStackSetDriftResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryDetectStackSetDriftCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryEstimateTemplateCostCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryEstimateTemplateCostCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryEstimateTemplateCostOutput(data.EstimateTemplateCostResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryEstimateTemplateCostCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryExecuteChangeSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryExecuteChangeSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryExecuteChangeSetOutput(data.ExecuteChangeSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryExecuteChangeSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
            throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
            throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "InvalidChangeSetStatus":
        case "com.amazonaws.cloudformation#InvalidChangeSetStatusException":
            throw await deserializeAws_queryInvalidChangeSetStatusExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryGetStackPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetStackPolicyCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetStackPolicyOutput(data.GetStackPolicyResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetStackPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryGetTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetTemplateOutput(data.GetTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ChangeSetNotFound":
        case "com.amazonaws.cloudformation#ChangeSetNotFoundException":
            throw await deserializeAws_queryChangeSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryGetTemplateSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryGetTemplateSummaryCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryGetTemplateSummaryOutput(data.GetTemplateSummaryResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryGetTemplateSummaryCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryImportStacksToStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryImportStacksToStackSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryImportStacksToStackSetOutput(data.ImportStacksToStackSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryImportStacksToStackSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cloudformation#LimitExceededException":
            throw await deserializeAws_queryLimitExceededExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackNotFoundException":
        case "com.amazonaws.cloudformation#StackNotFoundException":
            throw await deserializeAws_queryStackNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListChangeSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListChangeSetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListChangeSetsOutput(data.ListChangeSetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListChangeSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListExportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListExportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListExportsOutput(data.ListExportsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListExportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListImportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListImportsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListImportsOutput(data.ListImportsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListImportsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStackInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStackInstancesOutput(data.ListStackInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStackInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListStackResourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStackResourcesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStackResourcesOutput(data.ListStackResourcesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStackResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListStacksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStacksCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStacksOutput(data.ListStacksResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStacksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListStackSetOperationResultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetOperationResultsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStackSetOperationResultsOutput(data.ListStackSetOperationResultsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStackSetOperationResultsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
            throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListStackSetOperationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetOperationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStackSetOperationsOutput(data.ListStackSetOperationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStackSetOperationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListStackSetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListStackSetsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListStackSetsOutput(data.ListStackSetsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListStackSetsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryListTypeRegistrationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTypeRegistrationsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListTypeRegistrationsOutput(data.ListTypeRegistrationsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListTypeRegistrationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTypesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListTypesOutput(data.ListTypesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryListTypeVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryListTypeVersionsCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryListTypeVersionsOutput(data.ListTypeVersionsResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryListTypeVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryPublishTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryPublishTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryPublishTypeOutput(data.PublishTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryPublishTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRecordHandlerProgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRecordHandlerProgressCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRecordHandlerProgressOutput(data.RecordHandlerProgressResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRecordHandlerProgressCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConditionalCheckFailed":
        case "com.amazonaws.cloudformation#OperationStatusCheckFailedException":
            throw await deserializeAws_queryOperationStatusCheckFailedExceptionResponse(parsedOutput, context);
        case "InvalidStateTransition":
        case "com.amazonaws.cloudformation#InvalidStateTransitionException":
            throw await deserializeAws_queryInvalidStateTransitionExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRegisterPublisherCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterPublisherCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRegisterPublisherOutput(data.RegisterPublisherResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRegisterPublisherCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRegisterTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRegisterTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRegisterTypeOutput(data.RegisterTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRegisterTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryRollbackStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryRollbackStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryRollbackStackOutput(data.RollbackStackResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryRollbackStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySetStackPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetStackPolicyCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetStackPolicyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_querySetTypeConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetTypeConfigurationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetTypeConfigurationOutput(data.SetTypeConfigurationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetTypeConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySetTypeDefaultVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySetTypeDefaultVersionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_querySetTypeDefaultVersionOutput(data.SetTypeDefaultVersionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_querySetTypeDefaultVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_querySignalResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_querySignalResourceCommandError(output, context);
    }
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return Promise.resolve(response);
};
const deserializeAws_querySignalResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryStopStackSetOperationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryStopStackSetOperationCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryStopStackSetOperationOutput(data.StopStackSetOperationResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryStopStackSetOperationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationNotFoundException":
        case "com.amazonaws.cloudformation#OperationNotFoundException":
            throw await deserializeAws_queryOperationNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryTestTypeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryTestTypeCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryTestTypeOutput(data.TestTypeResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryTestTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "CFNRegistryException":
        case "com.amazonaws.cloudformation#CFNRegistryException":
            throw await deserializeAws_queryCFNRegistryExceptionResponse(parsedOutput, context);
        case "TypeNotFoundException":
        case "com.amazonaws.cloudformation#TypeNotFoundException":
            throw await deserializeAws_queryTypeNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateStackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateStackOutput(data.UpdateStackResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateStackCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InsufficientCapabilitiesException":
        case "com.amazonaws.cloudformation#InsufficientCapabilitiesException":
            throw await deserializeAws_queryInsufficientCapabilitiesExceptionResponse(parsedOutput, context);
        case "TokenAlreadyExistsException":
        case "com.amazonaws.cloudformation#TokenAlreadyExistsException":
            throw await deserializeAws_queryTokenAlreadyExistsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateStackInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackInstancesCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateStackInstancesOutput(data.UpdateStackInstancesResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateStackInstancesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
            throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateStackSetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateStackSetCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateStackSetOutput(data.UpdateStackSetResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateStackSetCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidOperationException":
        case "com.amazonaws.cloudformation#InvalidOperationException":
            throw await deserializeAws_queryInvalidOperationExceptionResponse(parsedOutput, context);
        case "OperationIdAlreadyExistsException":
        case "com.amazonaws.cloudformation#OperationIdAlreadyExistsException":
            throw await deserializeAws_queryOperationIdAlreadyExistsExceptionResponse(parsedOutput, context);
        case "OperationInProgressException":
        case "com.amazonaws.cloudformation#OperationInProgressException":
            throw await deserializeAws_queryOperationInProgressExceptionResponse(parsedOutput, context);
        case "StackInstanceNotFoundException":
        case "com.amazonaws.cloudformation#StackInstanceNotFoundException":
            throw await deserializeAws_queryStackInstanceNotFoundExceptionResponse(parsedOutput, context);
        case "StackSetNotFoundException":
        case "com.amazonaws.cloudformation#StackSetNotFoundException":
            throw await deserializeAws_queryStackSetNotFoundExceptionResponse(parsedOutput, context);
        case "StaleRequestException":
        case "com.amazonaws.cloudformation#StaleRequestException":
            throw await deserializeAws_queryStaleRequestExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            throwDefaultError({
                output,
                parsedBody: parsedBody.Error,
                exceptionCtor: __BaseException,
                errorCode,
            });
    }
};
export const deserializeAws_queryUpdateTerminationProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryUpdateTerminationProtectionCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryUpdateTerminationProtectionOutput(data.UpdateTerminationProtectionResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryUpdateTerminationProtectionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
export const deserializeAws_queryValidateTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return deserializeAws_queryValidateTemplateCommandError(output, context);
    }
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_queryValidateTemplateOutput(data.ValidateTemplateResult, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return Promise.resolve(response);
};
const deserializeAws_queryValidateTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadQueryErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    throwDefaultError({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: __BaseException,
        errorCode,
    });
};
const deserializeAws_queryAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryAlreadyExistsException(body.Error, context);
    const exception = new AlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCFNRegistryExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCFNRegistryException(body.Error, context);
    const exception = new CFNRegistryException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryChangeSetNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryChangeSetNotFoundException(body.Error, context);
    const exception = new ChangeSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryCreatedButModifiedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryCreatedButModifiedException(body.Error, context);
    const exception = new CreatedButModifiedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInsufficientCapabilitiesExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInsufficientCapabilitiesException(body.Error, context);
    const exception = new InsufficientCapabilitiesException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidChangeSetStatusExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidChangeSetStatusException(body.Error, context);
    const exception = new InvalidChangeSetStatusException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidOperationExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidOperationException(body.Error, context);
    const exception = new InvalidOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryInvalidStateTransitionExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryInvalidStateTransitionException(body.Error, context);
    const exception = new InvalidStateTransitionException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryLimitExceededExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryLimitExceededException(body.Error, context);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryNameAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryNameAlreadyExistsException(body.Error, context);
    const exception = new NameAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOperationIdAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOperationIdAlreadyExistsException(body.Error, context);
    const exception = new OperationIdAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOperationInProgressExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOperationInProgressException(body.Error, context);
    const exception = new OperationInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOperationNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOperationNotFoundException(body.Error, context);
    const exception = new OperationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryOperationStatusCheckFailedExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryOperationStatusCheckFailedException(body.Error, context);
    const exception = new OperationStatusCheckFailedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStackInstanceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStackInstanceNotFoundException(body.Error, context);
    const exception = new StackInstanceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStackNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStackNotFoundException(body.Error, context);
    const exception = new StackNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStackSetNotEmptyExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStackSetNotEmptyException(body.Error, context);
    const exception = new StackSetNotEmptyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStackSetNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStackSetNotFoundException(body.Error, context);
    const exception = new StackSetNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryStaleRequestExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryStaleRequestException(body.Error, context);
    const exception = new StaleRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTokenAlreadyExistsExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTokenAlreadyExistsException(body.Error, context);
    const exception = new TokenAlreadyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTypeConfigurationNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTypeConfigurationNotFoundException(body.Error, context);
    const exception = new TypeConfigurationNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const deserializeAws_queryTypeNotFoundExceptionResponse = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = deserializeAws_queryTypeNotFoundException(body.Error, context);
    const exception = new TypeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return __decorateServiceException(exception, body);
};
const serializeAws_queryAccountList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryActivateTypeInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.PublicTypeArn != null) {
        entries["PublicTypeArn"] = input.PublicTypeArn;
    }
    if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.TypeNameAlias != null) {
        entries["TypeNameAlias"] = input.TypeNameAlias;
    }
    if (input.AutoUpdate != null) {
        entries["AutoUpdate"] = input.AutoUpdate;
    }
    if (input.LoggingConfig != null) {
        const memberEntries = serializeAws_queryLoggingConfig(input.LoggingConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoggingConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExecutionRoleArn != null) {
        entries["ExecutionRoleArn"] = input.ExecutionRoleArn;
    }
    if (input.VersionBump != null) {
        entries["VersionBump"] = input.VersionBump;
    }
    if (input.MajorVersion != null) {
        entries["MajorVersion"] = input.MajorVersion;
    }
    return entries;
};
const serializeAws_queryAutoDeployment = (input, context) => {
    const entries = {};
    if (input.Enabled != null) {
        entries["Enabled"] = input.Enabled;
    }
    if (input.RetainStacksOnAccountRemoval != null) {
        entries["RetainStacksOnAccountRemoval"] = input.RetainStacksOnAccountRemoval;
    }
    return entries;
};
const serializeAws_queryBatchDescribeTypeConfigurationsInput = (input, context) => {
    const entries = {};
    if (input.TypeConfigurationIdentifiers != null) {
        const memberEntries = serializeAws_queryTypeConfigurationIdentifiers(input.TypeConfigurationIdentifiers, context);
        if (input.TypeConfigurationIdentifiers?.length === 0) {
            entries.TypeConfigurationIdentifiers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TypeConfigurationIdentifiers.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryCancelUpdateStackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryCapabilities = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryContinueUpdateRollbackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.ResourcesToSkip != null) {
        const memberEntries = serializeAws_queryResourcesToSkip(input.ResourcesToSkip, context);
        if (input.ResourcesToSkip?.length === 0) {
            entries.ResourcesToSkip = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourcesToSkip.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryCreateChangeSetInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.ClientToken != null) {
        entries["ClientToken"] = input.ClientToken;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.ChangeSetType != null) {
        entries["ChangeSetType"] = input.ChangeSetType;
    }
    if (input.ResourcesToImport != null) {
        const memberEntries = serializeAws_queryResourcesToImport(input.ResourcesToImport, context);
        if (input.ResourcesToImport?.length === 0) {
            entries.ResourcesToImport = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourcesToImport.${key}`;
            entries[loc] = value;
        });
    }
    if (input.IncludeNestedStacks != null) {
        entries["IncludeNestedStacks"] = input.IncludeNestedStacks;
    }
    return entries;
};
const serializeAws_queryCreateStackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
    }
    if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.TimeoutInMinutes != null) {
        entries["TimeoutInMinutes"] = input.TimeoutInMinutes;
    }
    if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.OnFailure != null) {
        entries["OnFailure"] = input.OnFailure;
    }
    if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
    }
    if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.EnableTerminationProtection != null) {
        entries["EnableTerminationProtection"] = input.EnableTerminationProtection;
    }
    return entries;
};
const serializeAws_queryCreateStackInstancesInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ParameterOverrides != null) {
        const memberEntries = serializeAws_queryParameters(input.ParameterOverrides, context);
        if (input.ParameterOverrides?.length === 0) {
            entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ParameterOverrides.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryCreateStackSetInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.StackId != null) {
        entries["StackId"] = input.StackId;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AdministrationRoleARN != null) {
        entries["AdministrationRoleARN"] = input.AdministrationRoleARN;
    }
    if (input.ExecutionRoleName != null) {
        entries["ExecutionRoleName"] = input.ExecutionRoleName;
    }
    if (input.PermissionModel != null) {
        entries["PermissionModel"] = input.PermissionModel;
    }
    if (input.AutoDeployment != null) {
        const memberEntries = serializeAws_queryAutoDeployment(input.AutoDeployment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoDeployment.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    if (input.ClientRequestToken === undefined) {
        input.ClientRequestToken = generateIdempotencyToken();
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.ManagedExecution != null) {
        const memberEntries = serializeAws_queryManagedExecution(input.ManagedExecution, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ManagedExecution.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDeactivateTypeInput = (input, context) => {
    const entries = {};
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    return entries;
};
const serializeAws_queryDeleteChangeSetInput = (input, context) => {
    const entries = {};
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    return entries;
};
const serializeAws_queryDeleteStackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.RetainResources != null) {
        const memberEntries = serializeAws_queryRetainResources(input.RetainResources, context);
        if (input.RetainResources?.length === 0) {
            entries.RetainResources = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RetainResources.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryDeleteStackInstancesInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RetainStacks != null) {
        entries["RetainStacks"] = input.RetainStacks;
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryDeleteStackSetInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryDeploymentTargets = (input, context) => {
    const entries = {};
    if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AccountsUrl != null) {
        entries["AccountsUrl"] = input.AccountsUrl;
    }
    if (input.OrganizationalUnitIds != null) {
        const memberEntries = serializeAws_queryOrganizationalUnitIdList(input.OrganizationalUnitIds, context);
        if (input.OrganizationalUnitIds?.length === 0) {
            entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AccountFilterType != null) {
        entries["AccountFilterType"] = input.AccountFilterType;
    }
    return entries;
};
const serializeAws_queryDeregisterTypeInput = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
    }
    return entries;
};
const serializeAws_queryDescribeAccountLimitsInput = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeChangeSetHooksInput = (input, context) => {
    const entries = {};
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    return entries;
};
const serializeAws_queryDescribeChangeSetInput = (input, context) => {
    const entries = {};
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribePublisherInput = (input, context) => {
    const entries = {};
    if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
    }
    return entries;
};
const serializeAws_queryDescribeStackDriftDetectionStatusInput = (input, context) => {
    const entries = {};
    if (input.StackDriftDetectionId != null) {
        entries["StackDriftDetectionId"] = input.StackDriftDetectionId;
    }
    return entries;
};
const serializeAws_queryDescribeStackEventsInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeStackInstanceInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.StackInstanceAccount != null) {
        entries["StackInstanceAccount"] = input.StackInstanceAccount;
    }
    if (input.StackInstanceRegion != null) {
        entries["StackInstanceRegion"] = input.StackInstanceRegion;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryDescribeStackResourceDriftsInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.StackResourceDriftStatusFilters != null) {
        const memberEntries = serializeAws_queryStackResourceDriftStatusFilters(input.StackResourceDriftStatusFilters, context);
        if (input.StackResourceDriftStatusFilters?.length === 0) {
            entries.StackResourceDriftStatusFilters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackResourceDriftStatusFilters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    return entries;
};
const serializeAws_queryDescribeStackResourceInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    return entries;
};
const serializeAws_queryDescribeStackResourcesInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    if (input.PhysicalResourceId != null) {
        entries["PhysicalResourceId"] = input.PhysicalResourceId;
    }
    return entries;
};
const serializeAws_queryDescribeStackSetInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryDescribeStackSetOperationInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryDescribeStacksInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryDescribeTypeInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
    }
    if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
    }
    if (input.PublicVersionNumber != null) {
        entries["PublicVersionNumber"] = input.PublicVersionNumber;
    }
    return entries;
};
const serializeAws_queryDescribeTypeRegistrationInput = (input, context) => {
    const entries = {};
    if (input.RegistrationToken != null) {
        entries["RegistrationToken"] = input.RegistrationToken;
    }
    return entries;
};
const serializeAws_queryDetectStackDriftInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.LogicalResourceIds != null) {
        const memberEntries = serializeAws_queryLogicalResourceIds(input.LogicalResourceIds, context);
        if (input.LogicalResourceIds?.length === 0) {
            entries.LogicalResourceIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogicalResourceIds.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryDetectStackResourceDriftInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    return entries;
};
const serializeAws_queryDetectStackSetDriftInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryEstimateTemplateCostInput = (input, context) => {
    const entries = {};
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryExecuteChangeSetInput = (input, context) => {
    const entries = {};
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
    }
    return entries;
};
const serializeAws_queryGetStackPolicyInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    return entries;
};
const serializeAws_queryGetTemplateInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.ChangeSetName != null) {
        entries["ChangeSetName"] = input.ChangeSetName;
    }
    if (input.TemplateStage != null) {
        entries["TemplateStage"] = input.TemplateStage;
    }
    return entries;
};
const serializeAws_queryGetTemplateSummaryInput = (input, context) => {
    const entries = {};
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryImportStacksToStackSetInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.StackIds != null) {
        const memberEntries = serializeAws_queryStackIdList(input.StackIds, context);
        if (input.StackIds?.length === 0) {
            entries.StackIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StackIdsUrl != null) {
        entries["StackIdsUrl"] = input.StackIdsUrl;
    }
    if (input.OrganizationalUnitIds != null) {
        const memberEntries = serializeAws_queryOrganizationalUnitIdList(input.OrganizationalUnitIds, context);
        if (input.OrganizationalUnitIds?.length === 0) {
            entries.OrganizationalUnitIds = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitIds.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryListChangeSetsInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListExportsInput = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListImportsInput = (input, context) => {
    const entries = {};
    if (input.ExportName != null) {
        entries["ExportName"] = input.ExportName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListStackInstancesInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryStackInstanceFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StackInstanceAccount != null) {
        entries["StackInstanceAccount"] = input.StackInstanceAccount;
    }
    if (input.StackInstanceRegion != null) {
        entries["StackInstanceRegion"] = input.StackInstanceRegion;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryListStackResourcesInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListStackSetOperationResultsInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryOperationResultFilters(input.Filters, context);
        if (input.Filters?.length === 0) {
            entries.Filters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryListStackSetOperationsInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryListStackSetsInput = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryListStacksInput = (input, context) => {
    const entries = {};
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.StackStatusFilter != null) {
        const memberEntries = serializeAws_queryStackStatusFilter(input.StackStatusFilter, context);
        if (input.StackStatusFilter?.length === 0) {
            entries.StackStatusFilter = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `StackStatusFilter.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryListTypeRegistrationsInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
    }
    if (input.RegistrationStatusFilter != null) {
        entries["RegistrationStatusFilter"] = input.RegistrationStatusFilter;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListTypesInput = (input, context) => {
    const entries = {};
    if (input.Visibility != null) {
        entries["Visibility"] = input.Visibility;
    }
    if (input.ProvisioningType != null) {
        entries["ProvisioningType"] = input.ProvisioningType;
    }
    if (input.DeprecatedStatus != null) {
        entries["DeprecatedStatus"] = input.DeprecatedStatus;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Filters != null) {
        const memberEntries = serializeAws_queryTypeFilters(input.Filters, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    return entries;
};
const serializeAws_queryListTypeVersionsInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.MaxResults != null) {
        entries["MaxResults"] = input.MaxResults;
    }
    if (input.NextToken != null) {
        entries["NextToken"] = input.NextToken;
    }
    if (input.DeprecatedStatus != null) {
        entries["DeprecatedStatus"] = input.DeprecatedStatus;
    }
    if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
    }
    return entries;
};
const serializeAws_queryLoggingConfig = (input, context) => {
    const entries = {};
    if (input.LogRoleArn != null) {
        entries["LogRoleArn"] = input.LogRoleArn;
    }
    if (input.LogGroupName != null) {
        entries["LogGroupName"] = input.LogGroupName;
    }
    return entries;
};
const serializeAws_queryLogicalResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryManagedExecution = (input, context) => {
    const entries = {};
    if (input.Active != null) {
        entries["Active"] = input.Active;
    }
    return entries;
};
const serializeAws_queryNotificationARNs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryOperationResultFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        entries["Values"] = input.Values;
    }
    return entries;
};
const serializeAws_queryOperationResultFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryOperationResultFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryOrganizationalUnitIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryParameter = (input, context) => {
    const entries = {};
    if (input.ParameterKey != null) {
        entries["ParameterKey"] = input.ParameterKey;
    }
    if (input.ParameterValue != null) {
        entries["ParameterValue"] = input.ParameterValue;
    }
    if (input.UsePreviousValue != null) {
        entries["UsePreviousValue"] = input.UsePreviousValue;
    }
    if (input.ResolvedValue != null) {
        entries["ResolvedValue"] = input.ResolvedValue;
    }
    return entries;
};
const serializeAws_queryParameters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryParameter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryPublishTypeInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.PublicVersionNumber != null) {
        entries["PublicVersionNumber"] = input.PublicVersionNumber;
    }
    return entries;
};
const serializeAws_queryRecordHandlerProgressInput = (input, context) => {
    const entries = {};
    if (input.BearerToken != null) {
        entries["BearerToken"] = input.BearerToken;
    }
    if (input.OperationStatus != null) {
        entries["OperationStatus"] = input.OperationStatus;
    }
    if (input.CurrentOperationStatus != null) {
        entries["CurrentOperationStatus"] = input.CurrentOperationStatus;
    }
    if (input.StatusMessage != null) {
        entries["StatusMessage"] = input.StatusMessage;
    }
    if (input.ErrorCode != null) {
        entries["ErrorCode"] = input.ErrorCode;
    }
    if (input.ResourceModel != null) {
        entries["ResourceModel"] = input.ResourceModel;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryRegionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryRegisterPublisherInput = (input, context) => {
    const entries = {};
    if (input.AcceptTermsAndConditions != null) {
        entries["AcceptTermsAndConditions"] = input.AcceptTermsAndConditions;
    }
    if (input.ConnectionArn != null) {
        entries["ConnectionArn"] = input.ConnectionArn;
    }
    return entries;
};
const serializeAws_queryRegisterTypeInput = (input, context) => {
    const entries = {};
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.SchemaHandlerPackage != null) {
        entries["SchemaHandlerPackage"] = input.SchemaHandlerPackage;
    }
    if (input.LoggingConfig != null) {
        const memberEntries = serializeAws_queryLoggingConfig(input.LoggingConfig, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoggingConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ExecutionRoleArn != null) {
        entries["ExecutionRoleArn"] = input.ExecutionRoleArn;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryResourceIdentifierProperties = (input, context) => {
    const entries = {};
    let counter = 1;
    Object.keys(input)
        .filter((key) => input[key] != null)
        .forEach((key) => {
        entries[`entry.${counter}.key`] = key;
        entries[`entry.${counter}.value`] = input[key];
        counter++;
    });
    return entries;
};
const serializeAws_queryResourcesToImport = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryResourceToImport(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryResourcesToSkip = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryResourceToImport = (input, context) => {
    const entries = {};
    if (input.ResourceType != null) {
        entries["ResourceType"] = input.ResourceType;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    if (input.ResourceIdentifier != null) {
        const memberEntries = serializeAws_queryResourceIdentifierProperties(input.ResourceIdentifier, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceIdentifier.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryResourceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryRetainResources = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryRollbackConfiguration = (input, context) => {
    const entries = {};
    if (input.RollbackTriggers != null) {
        const memberEntries = serializeAws_queryRollbackTriggers(input.RollbackTriggers, context);
        if (input.RollbackTriggers?.length === 0) {
            entries.RollbackTriggers = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackTriggers.${key}`;
            entries[loc] = value;
        });
    }
    if (input.MonitoringTimeInMinutes != null) {
        entries["MonitoringTimeInMinutes"] = input.MonitoringTimeInMinutes;
    }
    return entries;
};
const serializeAws_queryRollbackStackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryRollbackTrigger = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const serializeAws_queryRollbackTriggers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryRollbackTrigger(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_querySetStackPolicyInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
    }
    if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
    }
    return entries;
};
const serializeAws_querySetTypeConfigurationInput = (input, context) => {
    const entries = {};
    if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
    }
    if (input.Configuration != null) {
        entries["Configuration"] = input.Configuration;
    }
    if (input.ConfigurationAlias != null) {
        entries["ConfigurationAlias"] = input.ConfigurationAlias;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    return entries;
};
const serializeAws_querySetTypeDefaultVersionInput = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
    }
    return entries;
};
const serializeAws_querySignalResourceInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.LogicalResourceId != null) {
        entries["LogicalResourceId"] = input.LogicalResourceId;
    }
    if (input.UniqueId != null) {
        entries["UniqueId"] = input.UniqueId;
    }
    if (input.Status != null) {
        entries["Status"] = input.Status;
    }
    return entries;
};
const serializeAws_queryStackIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryStackInstanceFilter = (input, context) => {
    const entries = {};
    if (input.Name != null) {
        entries["Name"] = input.Name;
    }
    if (input.Values != null) {
        entries["Values"] = input.Values;
    }
    return entries;
};
const serializeAws_queryStackInstanceFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryStackInstanceFilter(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryStackResourceDriftStatusFilters = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryStackSetOperationPreferences = (input, context) => {
    const entries = {};
    if (input.RegionConcurrencyType != null) {
        entries["RegionConcurrencyType"] = input.RegionConcurrencyType;
    }
    if (input.RegionOrder != null) {
        const memberEntries = serializeAws_queryRegionList(input.RegionOrder, context);
        if (input.RegionOrder?.length === 0) {
            entries.RegionOrder = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionOrder.${key}`;
            entries[loc] = value;
        });
    }
    if (input.FailureToleranceCount != null) {
        entries["FailureToleranceCount"] = input.FailureToleranceCount;
    }
    if (input.FailureTolerancePercentage != null) {
        entries["FailureTolerancePercentage"] = input.FailureTolerancePercentage;
    }
    if (input.MaxConcurrentCount != null) {
        entries["MaxConcurrentCount"] = input.MaxConcurrentCount;
    }
    if (input.MaxConcurrentPercentage != null) {
        entries["MaxConcurrentPercentage"] = input.MaxConcurrentPercentage;
    }
    return entries;
};
const serializeAws_queryStackStatusFilter = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const serializeAws_queryStopStackSetOperationInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryTag = (input, context) => {
    const entries = {};
    if (input.Key != null) {
        entries["Key"] = input.Key;
    }
    if (input.Value != null) {
        entries["Value"] = input.Value;
    }
    return entries;
};
const serializeAws_queryTags = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTestTypeInput = (input, context) => {
    const entries = {};
    if (input.Arn != null) {
        entries["Arn"] = input.Arn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    if (input.VersionId != null) {
        entries["VersionId"] = input.VersionId;
    }
    if (input.LogDeliveryBucket != null) {
        entries["LogDeliveryBucket"] = input.LogDeliveryBucket;
    }
    return entries;
};
const serializeAws_queryTypeConfigurationIdentifier = (input, context) => {
    const entries = {};
    if (input.TypeArn != null) {
        entries["TypeArn"] = input.TypeArn;
    }
    if (input.TypeConfigurationAlias != null) {
        entries["TypeConfigurationAlias"] = input.TypeConfigurationAlias;
    }
    if (input.TypeConfigurationArn != null) {
        entries["TypeConfigurationArn"] = input.TypeConfigurationArn;
    }
    if (input.Type != null) {
        entries["Type"] = input.Type;
    }
    if (input.TypeName != null) {
        entries["TypeName"] = input.TypeName;
    }
    return entries;
};
const serializeAws_queryTypeConfigurationIdentifiers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = serializeAws_queryTypeConfigurationIdentifier(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const serializeAws_queryTypeFilters = (input, context) => {
    const entries = {};
    if (input.Category != null) {
        entries["Category"] = input.Category;
    }
    if (input.PublisherId != null) {
        entries["PublisherId"] = input.PublisherId;
    }
    if (input.TypeNamePrefix != null) {
        entries["TypeNamePrefix"] = input.TypeNamePrefix;
    }
    return entries;
};
const serializeAws_queryUpdateStackInput = (input, context) => {
    const entries = {};
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
    }
    if (input.StackPolicyDuringUpdateBody != null) {
        entries["StackPolicyDuringUpdateBody"] = input.StackPolicyDuringUpdateBody;
    }
    if (input.StackPolicyDuringUpdateURL != null) {
        entries["StackPolicyDuringUpdateURL"] = input.StackPolicyDuringUpdateURL;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ResourceTypes != null) {
        const memberEntries = serializeAws_queryResourceTypes(input.ResourceTypes, context);
        if (input.ResourceTypes?.length === 0) {
            entries.ResourceTypes = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypes.${key}`;
            entries[loc] = value;
        });
    }
    if (input.RoleARN != null) {
        entries["RoleARN"] = input.RoleARN;
    }
    if (input.RollbackConfiguration != null) {
        const memberEntries = serializeAws_queryRollbackConfiguration(input.RollbackConfiguration, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RollbackConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input.StackPolicyBody != null) {
        entries["StackPolicyBody"] = input.StackPolicyBody;
    }
    if (input.StackPolicyURL != null) {
        entries["StackPolicyURL"] = input.StackPolicyURL;
    }
    if (input.NotificationARNs != null) {
        const memberEntries = serializeAws_queryNotificationARNs(input.NotificationARNs, context);
        if (input.NotificationARNs?.length === 0) {
            entries.NotificationARNs = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NotificationARNs.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DisableRollback != null) {
        entries["DisableRollback"] = input.DisableRollback;
    }
    if (input.ClientRequestToken != null) {
        entries["ClientRequestToken"] = input.ClientRequestToken;
    }
    return entries;
};
const serializeAws_queryUpdateStackInstancesInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.ParameterOverrides != null) {
        const memberEntries = serializeAws_queryParameters(input.ParameterOverrides, context);
        if (input.ParameterOverrides?.length === 0) {
            entries.ParameterOverrides = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ParameterOverrides.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    return entries;
};
const serializeAws_queryUpdateStackSetInput = (input, context) => {
    const entries = {};
    if (input.StackSetName != null) {
        entries["StackSetName"] = input.StackSetName;
    }
    if (input.Description != null) {
        entries["Description"] = input.Description;
    }
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    if (input.UsePreviousTemplate != null) {
        entries["UsePreviousTemplate"] = input.UsePreviousTemplate;
    }
    if (input.Parameters != null) {
        const memberEntries = serializeAws_queryParameters(input.Parameters, context);
        if (input.Parameters?.length === 0) {
            entries.Parameters = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Parameters.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Capabilities != null) {
        const memberEntries = serializeAws_queryCapabilities(input.Capabilities, context);
        if (input.Capabilities?.length === 0) {
            entries.Capabilities = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Capabilities.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Tags != null) {
        const memberEntries = serializeAws_queryTags(input.Tags, context);
        if (input.Tags?.length === 0) {
            entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tags.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationPreferences != null) {
        const memberEntries = serializeAws_queryStackSetOperationPreferences(input.OperationPreferences, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperationPreferences.${key}`;
            entries[loc] = value;
        });
    }
    if (input.AdministrationRoleARN != null) {
        entries["AdministrationRoleARN"] = input.AdministrationRoleARN;
    }
    if (input.ExecutionRoleName != null) {
        entries["ExecutionRoleName"] = input.ExecutionRoleName;
    }
    if (input.DeploymentTargets != null) {
        const memberEntries = serializeAws_queryDeploymentTargets(input.DeploymentTargets, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeploymentTargets.${key}`;
            entries[loc] = value;
        });
    }
    if (input.PermissionModel != null) {
        entries["PermissionModel"] = input.PermissionModel;
    }
    if (input.AutoDeployment != null) {
        const memberEntries = serializeAws_queryAutoDeployment(input.AutoDeployment, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoDeployment.${key}`;
            entries[loc] = value;
        });
    }
    if (input.OperationId === undefined) {
        input.OperationId = generateIdempotencyToken();
    }
    if (input.OperationId != null) {
        entries["OperationId"] = input.OperationId;
    }
    if (input.Accounts != null) {
        const memberEntries = serializeAws_queryAccountList(input.Accounts, context);
        if (input.Accounts?.length === 0) {
            entries.Accounts = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Accounts.${key}`;
            entries[loc] = value;
        });
    }
    if (input.Regions != null) {
        const memberEntries = serializeAws_queryRegionList(input.Regions, context);
        if (input.Regions?.length === 0) {
            entries.Regions = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Regions.${key}`;
            entries[loc] = value;
        });
    }
    if (input.CallAs != null) {
        entries["CallAs"] = input.CallAs;
    }
    if (input.ManagedExecution != null) {
        const memberEntries = serializeAws_queryManagedExecution(input.ManagedExecution, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ManagedExecution.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const serializeAws_queryUpdateTerminationProtectionInput = (input, context) => {
    const entries = {};
    if (input.EnableTerminationProtection != null) {
        entries["EnableTerminationProtection"] = input.EnableTerminationProtection;
    }
    if (input.StackName != null) {
        entries["StackName"] = input.StackName;
    }
    return entries;
};
const serializeAws_queryValidateTemplateInput = (input, context) => {
    const entries = {};
    if (input.TemplateBody != null) {
        entries["TemplateBody"] = input.TemplateBody;
    }
    if (input.TemplateURL != null) {
        entries["TemplateURL"] = input.TemplateURL;
    }
    return entries;
};
const deserializeAws_queryAccountGateResult = (output, context) => {
    const contents = {
        Status: undefined,
        StatusReason: undefined,
    };
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    return contents;
};
const deserializeAws_queryAccountLimit = (output, context) => {
    const contents = {
        Name: undefined,
        Value: undefined,
    };
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __strictParseInt32(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryAccountLimitList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryAccountLimit(entry, context);
    });
};
const deserializeAws_queryAccountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryActivateTypeOutput = (output, context) => {
    const contents = {
        Arn: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    return contents;
};
const deserializeAws_queryAllowedValues = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryAlreadyExistsException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryAutoDeployment = (output, context) => {
    const contents = {
        Enabled: undefined,
        RetainStacksOnAccountRemoval: undefined,
    };
    if (output["Enabled"] !== undefined) {
        contents.Enabled = __parseBoolean(output["Enabled"]);
    }
    if (output["RetainStacksOnAccountRemoval"] !== undefined) {
        contents.RetainStacksOnAccountRemoval = __parseBoolean(output["RetainStacksOnAccountRemoval"]);
    }
    return contents;
};
const deserializeAws_queryBatchDescribeTypeConfigurationsError = (output, context) => {
    const contents = {
        ErrorCode: undefined,
        ErrorMessage: undefined,
        TypeConfigurationIdentifier: undefined,
    };
    if (output["ErrorCode"] !== undefined) {
        contents.ErrorCode = __expectString(output["ErrorCode"]);
    }
    if (output["ErrorMessage"] !== undefined) {
        contents.ErrorMessage = __expectString(output["ErrorMessage"]);
    }
    if (output["TypeConfigurationIdentifier"] !== undefined) {
        contents.TypeConfigurationIdentifier = deserializeAws_queryTypeConfigurationIdentifier(output["TypeConfigurationIdentifier"], context);
    }
    return contents;
};
const deserializeAws_queryBatchDescribeTypeConfigurationsErrors = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryBatchDescribeTypeConfigurationsError(entry, context);
    });
};
const deserializeAws_queryBatchDescribeTypeConfigurationsOutput = (output, context) => {
    const contents = {
        Errors: undefined,
        UnprocessedTypeConfigurations: undefined,
        TypeConfigurations: undefined,
    };
    if (output.Errors === "") {
        contents.Errors = [];
    }
    else if (output["Errors"] !== undefined && output["Errors"]["member"] !== undefined) {
        contents.Errors = deserializeAws_queryBatchDescribeTypeConfigurationsErrors(__getArrayIfSingleItem(output["Errors"]["member"]), context);
    }
    if (output.UnprocessedTypeConfigurations === "") {
        contents.UnprocessedTypeConfigurations = [];
    }
    else if (output["UnprocessedTypeConfigurations"] !== undefined &&
        output["UnprocessedTypeConfigurations"]["member"] !== undefined) {
        contents.UnprocessedTypeConfigurations = deserializeAws_queryUnprocessedTypeConfigurations(__getArrayIfSingleItem(output["UnprocessedTypeConfigurations"]["member"]), context);
    }
    if (output.TypeConfigurations === "") {
        contents.TypeConfigurations = [];
    }
    else if (output["TypeConfigurations"] !== undefined && output["TypeConfigurations"]["member"] !== undefined) {
        contents.TypeConfigurations = deserializeAws_queryTypeConfigurationDetailsList(__getArrayIfSingleItem(output["TypeConfigurations"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryCapabilities = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryCFNRegistryException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryChange = (output, context) => {
    const contents = {
        Type: undefined,
        HookInvocationCount: undefined,
        ResourceChange: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["HookInvocationCount"] !== undefined) {
        contents.HookInvocationCount = __strictParseInt32(output["HookInvocationCount"]);
    }
    if (output["ResourceChange"] !== undefined) {
        contents.ResourceChange = deserializeAws_queryResourceChange(output["ResourceChange"], context);
    }
    return contents;
};
const deserializeAws_queryChanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryChange(entry, context);
    });
};
const deserializeAws_queryChangeSetHook = (output, context) => {
    const contents = {
        InvocationPoint: undefined,
        FailureMode: undefined,
        TypeName: undefined,
        TypeVersionId: undefined,
        TypeConfigurationVersionId: undefined,
        TargetDetails: undefined,
    };
    if (output["InvocationPoint"] !== undefined) {
        contents.InvocationPoint = __expectString(output["InvocationPoint"]);
    }
    if (output["FailureMode"] !== undefined) {
        contents.FailureMode = __expectString(output["FailureMode"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    if (output["TypeVersionId"] !== undefined) {
        contents.TypeVersionId = __expectString(output["TypeVersionId"]);
    }
    if (output["TypeConfigurationVersionId"] !== undefined) {
        contents.TypeConfigurationVersionId = __expectString(output["TypeConfigurationVersionId"]);
    }
    if (output["TargetDetails"] !== undefined) {
        contents.TargetDetails = deserializeAws_queryChangeSetHookTargetDetails(output["TargetDetails"], context);
    }
    return contents;
};
const deserializeAws_queryChangeSetHookResourceTargetDetails = (output, context) => {
    const contents = {
        LogicalResourceId: undefined,
        ResourceType: undefined,
        ResourceAction: undefined,
    };
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["ResourceAction"] !== undefined) {
        contents.ResourceAction = __expectString(output["ResourceAction"]);
    }
    return contents;
};
const deserializeAws_queryChangeSetHooks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryChangeSetHook(entry, context);
    });
};
const deserializeAws_queryChangeSetHookTargetDetails = (output, context) => {
    const contents = {
        TargetType: undefined,
        ResourceTargetDetails: undefined,
    };
    if (output["TargetType"] !== undefined) {
        contents.TargetType = __expectString(output["TargetType"]);
    }
    if (output["ResourceTargetDetails"] !== undefined) {
        contents.ResourceTargetDetails = deserializeAws_queryChangeSetHookResourceTargetDetails(output["ResourceTargetDetails"], context);
    }
    return contents;
};
const deserializeAws_queryChangeSetNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryChangeSetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryChangeSetSummary(entry, context);
    });
};
const deserializeAws_queryChangeSetSummary = (output, context) => {
    const contents = {
        StackId: undefined,
        StackName: undefined,
        ChangeSetId: undefined,
        ChangeSetName: undefined,
        ExecutionStatus: undefined,
        Status: undefined,
        StatusReason: undefined,
        CreationTime: undefined,
        Description: undefined,
        IncludeNestedStacks: undefined,
        ParentChangeSetId: undefined,
        RootChangeSetId: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["ChangeSetId"] !== undefined) {
        contents.ChangeSetId = __expectString(output["ChangeSetId"]);
    }
    if (output["ChangeSetName"] !== undefined) {
        contents.ChangeSetName = __expectString(output["ChangeSetName"]);
    }
    if (output["ExecutionStatus"] !== undefined) {
        contents.ExecutionStatus = __expectString(output["ExecutionStatus"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["CreationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTime"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["IncludeNestedStacks"] !== undefined) {
        contents.IncludeNestedStacks = __parseBoolean(output["IncludeNestedStacks"]);
    }
    if (output["ParentChangeSetId"] !== undefined) {
        contents.ParentChangeSetId = __expectString(output["ParentChangeSetId"]);
    }
    if (output["RootChangeSetId"] !== undefined) {
        contents.RootChangeSetId = __expectString(output["RootChangeSetId"]);
    }
    return contents;
};
const deserializeAws_queryContinueUpdateRollbackOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryCreateChangeSetOutput = (output, context) => {
    const contents = {
        Id: undefined,
        StackId: undefined,
    };
    if (output["Id"] !== undefined) {
        contents.Id = __expectString(output["Id"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    return contents;
};
const deserializeAws_queryCreatedButModifiedException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryCreateStackInstancesOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryCreateStackOutput = (output, context) => {
    const contents = {
        StackId: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    return contents;
};
const deserializeAws_queryCreateStackSetOutput = (output, context) => {
    const contents = {
        StackSetId: undefined,
    };
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    return contents;
};
const deserializeAws_queryDeactivateTypeOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteChangeSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeleteStackInstancesOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryDeleteStackSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDeploymentTargets = (output, context) => {
    const contents = {
        Accounts: undefined,
        AccountsUrl: undefined,
        OrganizationalUnitIds: undefined,
        AccountFilterType: undefined,
    };
    if (output.Accounts === "") {
        contents.Accounts = [];
    }
    else if (output["Accounts"] !== undefined && output["Accounts"]["member"] !== undefined) {
        contents.Accounts = deserializeAws_queryAccountList(__getArrayIfSingleItem(output["Accounts"]["member"]), context);
    }
    if (output["AccountsUrl"] !== undefined) {
        contents.AccountsUrl = __expectString(output["AccountsUrl"]);
    }
    if (output.OrganizationalUnitIds === "") {
        contents.OrganizationalUnitIds = [];
    }
    else if (output["OrganizationalUnitIds"] !== undefined && output["OrganizationalUnitIds"]["member"] !== undefined) {
        contents.OrganizationalUnitIds = deserializeAws_queryOrganizationalUnitIdList(__getArrayIfSingleItem(output["OrganizationalUnitIds"]["member"]), context);
    }
    if (output["AccountFilterType"] !== undefined) {
        contents.AccountFilterType = __expectString(output["AccountFilterType"]);
    }
    return contents;
};
const deserializeAws_queryDeregisterTypeOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryDescribeAccountLimitsOutput = (output, context) => {
    const contents = {
        AccountLimits: undefined,
        NextToken: undefined,
    };
    if (output.AccountLimits === "") {
        contents.AccountLimits = [];
    }
    else if (output["AccountLimits"] !== undefined && output["AccountLimits"]["member"] !== undefined) {
        contents.AccountLimits = deserializeAws_queryAccountLimitList(__getArrayIfSingleItem(output["AccountLimits"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeChangeSetHooksOutput = (output, context) => {
    const contents = {
        ChangeSetId: undefined,
        ChangeSetName: undefined,
        Hooks: undefined,
        Status: undefined,
        NextToken: undefined,
        StackId: undefined,
        StackName: undefined,
    };
    if (output["ChangeSetId"] !== undefined) {
        contents.ChangeSetId = __expectString(output["ChangeSetId"]);
    }
    if (output["ChangeSetName"] !== undefined) {
        contents.ChangeSetName = __expectString(output["ChangeSetName"]);
    }
    if (output.Hooks === "") {
        contents.Hooks = [];
    }
    else if (output["Hooks"] !== undefined && output["Hooks"]["member"] !== undefined) {
        contents.Hooks = deserializeAws_queryChangeSetHooks(__getArrayIfSingleItem(output["Hooks"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    return contents;
};
const deserializeAws_queryDescribeChangeSetOutput = (output, context) => {
    const contents = {
        ChangeSetName: undefined,
        ChangeSetId: undefined,
        StackId: undefined,
        StackName: undefined,
        Description: undefined,
        Parameters: undefined,
        CreationTime: undefined,
        ExecutionStatus: undefined,
        Status: undefined,
        StatusReason: undefined,
        NotificationARNs: undefined,
        RollbackConfiguration: undefined,
        Capabilities: undefined,
        Tags: undefined,
        Changes: undefined,
        NextToken: undefined,
        IncludeNestedStacks: undefined,
        ParentChangeSetId: undefined,
        RootChangeSetId: undefined,
    };
    if (output["ChangeSetName"] !== undefined) {
        contents.ChangeSetName = __expectString(output["ChangeSetName"]);
    }
    if (output["ChangeSetId"] !== undefined) {
        contents.ChangeSetId = __expectString(output["ChangeSetId"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["member"] !== undefined) {
        contents.Parameters = deserializeAws_queryParameters(__getArrayIfSingleItem(output["Parameters"]["member"]), context);
    }
    if (output["CreationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTime"]));
    }
    if (output["ExecutionStatus"] !== undefined) {
        contents.ExecutionStatus = __expectString(output["ExecutionStatus"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output.NotificationARNs === "") {
        contents.NotificationARNs = [];
    }
    else if (output["NotificationARNs"] !== undefined && output["NotificationARNs"]["member"] !== undefined) {
        contents.NotificationARNs = deserializeAws_queryNotificationARNs(__getArrayIfSingleItem(output["NotificationARNs"]["member"]), context);
    }
    if (output["RollbackConfiguration"] !== undefined) {
        contents.RollbackConfiguration = deserializeAws_queryRollbackConfiguration(output["RollbackConfiguration"], context);
    }
    if (output.Capabilities === "") {
        contents.Capabilities = [];
    }
    else if (output["Capabilities"] !== undefined && output["Capabilities"]["member"] !== undefined) {
        contents.Capabilities = deserializeAws_queryCapabilities(__getArrayIfSingleItem(output["Capabilities"]["member"]), context);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["member"] !== undefined) {
        contents.Tags = deserializeAws_queryTags(__getArrayIfSingleItem(output["Tags"]["member"]), context);
    }
    if (output.Changes === "") {
        contents.Changes = [];
    }
    else if (output["Changes"] !== undefined && output["Changes"]["member"] !== undefined) {
        contents.Changes = deserializeAws_queryChanges(__getArrayIfSingleItem(output["Changes"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    if (output["IncludeNestedStacks"] !== undefined) {
        contents.IncludeNestedStacks = __parseBoolean(output["IncludeNestedStacks"]);
    }
    if (output["ParentChangeSetId"] !== undefined) {
        contents.ParentChangeSetId = __expectString(output["ParentChangeSetId"]);
    }
    if (output["RootChangeSetId"] !== undefined) {
        contents.RootChangeSetId = __expectString(output["RootChangeSetId"]);
    }
    return contents;
};
const deserializeAws_queryDescribePublisherOutput = (output, context) => {
    const contents = {
        PublisherId: undefined,
        PublisherStatus: undefined,
        IdentityProvider: undefined,
        PublisherProfile: undefined,
    };
    if (output["PublisherId"] !== undefined) {
        contents.PublisherId = __expectString(output["PublisherId"]);
    }
    if (output["PublisherStatus"] !== undefined) {
        contents.PublisherStatus = __expectString(output["PublisherStatus"]);
    }
    if (output["IdentityProvider"] !== undefined) {
        contents.IdentityProvider = __expectString(output["IdentityProvider"]);
    }
    if (output["PublisherProfile"] !== undefined) {
        contents.PublisherProfile = __expectString(output["PublisherProfile"]);
    }
    return contents;
};
const deserializeAws_queryDescribeStackDriftDetectionStatusOutput = (output, context) => {
    const contents = {
        StackId: undefined,
        StackDriftDetectionId: undefined,
        StackDriftStatus: undefined,
        DetectionStatus: undefined,
        DetectionStatusReason: undefined,
        DriftedStackResourceCount: undefined,
        Timestamp: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackDriftDetectionId"] !== undefined) {
        contents.StackDriftDetectionId = __expectString(output["StackDriftDetectionId"]);
    }
    if (output["StackDriftStatus"] !== undefined) {
        contents.StackDriftStatus = __expectString(output["StackDriftStatus"]);
    }
    if (output["DetectionStatus"] !== undefined) {
        contents.DetectionStatus = __expectString(output["DetectionStatus"]);
    }
    if (output["DetectionStatusReason"] !== undefined) {
        contents.DetectionStatusReason = __expectString(output["DetectionStatusReason"]);
    }
    if (output["DriftedStackResourceCount"] !== undefined) {
        contents.DriftedStackResourceCount = __strictParseInt32(output["DriftedStackResourceCount"]);
    }
    if (output["Timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["Timestamp"]));
    }
    return contents;
};
const deserializeAws_queryDescribeStackEventsOutput = (output, context) => {
    const contents = {
        StackEvents: undefined,
        NextToken: undefined,
    };
    if (output.StackEvents === "") {
        contents.StackEvents = [];
    }
    else if (output["StackEvents"] !== undefined && output["StackEvents"]["member"] !== undefined) {
        contents.StackEvents = deserializeAws_queryStackEvents(__getArrayIfSingleItem(output["StackEvents"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeStackInstanceOutput = (output, context) => {
    const contents = {
        StackInstance: undefined,
    };
    if (output["StackInstance"] !== undefined) {
        contents.StackInstance = deserializeAws_queryStackInstance(output["StackInstance"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeStackResourceDriftsOutput = (output, context) => {
    const contents = {
        StackResourceDrifts: undefined,
        NextToken: undefined,
    };
    if (output.StackResourceDrifts === "") {
        contents.StackResourceDrifts = [];
    }
    else if (output["StackResourceDrifts"] !== undefined && output["StackResourceDrifts"]["member"] !== undefined) {
        contents.StackResourceDrifts = deserializeAws_queryStackResourceDrifts(__getArrayIfSingleItem(output["StackResourceDrifts"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeStackResourceOutput = (output, context) => {
    const contents = {
        StackResourceDetail: undefined,
    };
    if (output["StackResourceDetail"] !== undefined) {
        contents.StackResourceDetail = deserializeAws_queryStackResourceDetail(output["StackResourceDetail"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeStackResourcesOutput = (output, context) => {
    const contents = {
        StackResources: undefined,
    };
    if (output.StackResources === "") {
        contents.StackResources = [];
    }
    else if (output["StackResources"] !== undefined && output["StackResources"]["member"] !== undefined) {
        contents.StackResources = deserializeAws_queryStackResources(__getArrayIfSingleItem(output["StackResources"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryDescribeStackSetOperationOutput = (output, context) => {
    const contents = {
        StackSetOperation: undefined,
    };
    if (output["StackSetOperation"] !== undefined) {
        contents.StackSetOperation = deserializeAws_queryStackSetOperation(output["StackSetOperation"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeStackSetOutput = (output, context) => {
    const contents = {
        StackSet: undefined,
    };
    if (output["StackSet"] !== undefined) {
        contents.StackSet = deserializeAws_queryStackSet(output["StackSet"], context);
    }
    return contents;
};
const deserializeAws_queryDescribeStacksOutput = (output, context) => {
    const contents = {
        Stacks: undefined,
        NextToken: undefined,
    };
    if (output.Stacks === "") {
        contents.Stacks = [];
    }
    else if (output["Stacks"] !== undefined && output["Stacks"]["member"] !== undefined) {
        contents.Stacks = deserializeAws_queryStacks(__getArrayIfSingleItem(output["Stacks"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryDescribeTypeOutput = (output, context) => {
    const contents = {
        Arn: undefined,
        Type: undefined,
        TypeName: undefined,
        DefaultVersionId: undefined,
        IsDefaultVersion: undefined,
        TypeTestsStatus: undefined,
        TypeTestsStatusDescription: undefined,
        Description: undefined,
        Schema: undefined,
        ProvisioningType: undefined,
        DeprecatedStatus: undefined,
        LoggingConfig: undefined,
        RequiredActivatedTypes: undefined,
        ExecutionRoleArn: undefined,
        Visibility: undefined,
        SourceUrl: undefined,
        DocumentationUrl: undefined,
        LastUpdated: undefined,
        TimeCreated: undefined,
        ConfigurationSchema: undefined,
        PublisherId: undefined,
        OriginalTypeName: undefined,
        OriginalTypeArn: undefined,
        PublicVersionNumber: undefined,
        LatestPublicVersion: undefined,
        IsActivated: undefined,
        AutoUpdate: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    if (output["DefaultVersionId"] !== undefined) {
        contents.DefaultVersionId = __expectString(output["DefaultVersionId"]);
    }
    if (output["IsDefaultVersion"] !== undefined) {
        contents.IsDefaultVersion = __parseBoolean(output["IsDefaultVersion"]);
    }
    if (output["TypeTestsStatus"] !== undefined) {
        contents.TypeTestsStatus = __expectString(output["TypeTestsStatus"]);
    }
    if (output["TypeTestsStatusDescription"] !== undefined) {
        contents.TypeTestsStatusDescription = __expectString(output["TypeTestsStatusDescription"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Schema"] !== undefined) {
        contents.Schema = __expectString(output["Schema"]);
    }
    if (output["ProvisioningType"] !== undefined) {
        contents.ProvisioningType = __expectString(output["ProvisioningType"]);
    }
    if (output["DeprecatedStatus"] !== undefined) {
        contents.DeprecatedStatus = __expectString(output["DeprecatedStatus"]);
    }
    if (output["LoggingConfig"] !== undefined) {
        contents.LoggingConfig = deserializeAws_queryLoggingConfig(output["LoggingConfig"], context);
    }
    if (output.RequiredActivatedTypes === "") {
        contents.RequiredActivatedTypes = [];
    }
    else if (output["RequiredActivatedTypes"] !== undefined &&
        output["RequiredActivatedTypes"]["member"] !== undefined) {
        contents.RequiredActivatedTypes = deserializeAws_queryRequiredActivatedTypes(__getArrayIfSingleItem(output["RequiredActivatedTypes"]["member"]), context);
    }
    if (output["ExecutionRoleArn"] !== undefined) {
        contents.ExecutionRoleArn = __expectString(output["ExecutionRoleArn"]);
    }
    if (output["Visibility"] !== undefined) {
        contents.Visibility = __expectString(output["Visibility"]);
    }
    if (output["SourceUrl"] !== undefined) {
        contents.SourceUrl = __expectString(output["SourceUrl"]);
    }
    if (output["DocumentationUrl"] !== undefined) {
        contents.DocumentationUrl = __expectString(output["DocumentationUrl"]);
    }
    if (output["LastUpdated"] !== undefined) {
        contents.LastUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdated"]));
    }
    if (output["TimeCreated"] !== undefined) {
        contents.TimeCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["TimeCreated"]));
    }
    if (output["ConfigurationSchema"] !== undefined) {
        contents.ConfigurationSchema = __expectString(output["ConfigurationSchema"]);
    }
    if (output["PublisherId"] !== undefined) {
        contents.PublisherId = __expectString(output["PublisherId"]);
    }
    if (output["OriginalTypeName"] !== undefined) {
        contents.OriginalTypeName = __expectString(output["OriginalTypeName"]);
    }
    if (output["OriginalTypeArn"] !== undefined) {
        contents.OriginalTypeArn = __expectString(output["OriginalTypeArn"]);
    }
    if (output["PublicVersionNumber"] !== undefined) {
        contents.PublicVersionNumber = __expectString(output["PublicVersionNumber"]);
    }
    if (output["LatestPublicVersion"] !== undefined) {
        contents.LatestPublicVersion = __expectString(output["LatestPublicVersion"]);
    }
    if (output["IsActivated"] !== undefined) {
        contents.IsActivated = __parseBoolean(output["IsActivated"]);
    }
    if (output["AutoUpdate"] !== undefined) {
        contents.AutoUpdate = __parseBoolean(output["AutoUpdate"]);
    }
    return contents;
};
const deserializeAws_queryDescribeTypeRegistrationOutput = (output, context) => {
    const contents = {
        ProgressStatus: undefined,
        Description: undefined,
        TypeArn: undefined,
        TypeVersionArn: undefined,
    };
    if (output["ProgressStatus"] !== undefined) {
        contents.ProgressStatus = __expectString(output["ProgressStatus"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["TypeArn"] !== undefined) {
        contents.TypeArn = __expectString(output["TypeArn"]);
    }
    if (output["TypeVersionArn"] !== undefined) {
        contents.TypeVersionArn = __expectString(output["TypeVersionArn"]);
    }
    return contents;
};
const deserializeAws_queryDetectStackDriftOutput = (output, context) => {
    const contents = {
        StackDriftDetectionId: undefined,
    };
    if (output["StackDriftDetectionId"] !== undefined) {
        contents.StackDriftDetectionId = __expectString(output["StackDriftDetectionId"]);
    }
    return contents;
};
const deserializeAws_queryDetectStackResourceDriftOutput = (output, context) => {
    const contents = {
        StackResourceDrift: undefined,
    };
    if (output["StackResourceDrift"] !== undefined) {
        contents.StackResourceDrift = deserializeAws_queryStackResourceDrift(output["StackResourceDrift"], context);
    }
    return contents;
};
const deserializeAws_queryDetectStackSetDriftOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryEstimateTemplateCostOutput = (output, context) => {
    const contents = {
        Url: undefined,
    };
    if (output["Url"] !== undefined) {
        contents.Url = __expectString(output["Url"]);
    }
    return contents;
};
const deserializeAws_queryExecuteChangeSetOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryExport = (output, context) => {
    const contents = {
        ExportingStackId: undefined,
        Name: undefined,
        Value: undefined,
    };
    if (output["ExportingStackId"] !== undefined) {
        contents.ExportingStackId = __expectString(output["ExportingStackId"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryExports = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryExport(entry, context);
    });
};
const deserializeAws_queryGetStackPolicyOutput = (output, context) => {
    const contents = {
        StackPolicyBody: undefined,
    };
    if (output["StackPolicyBody"] !== undefined) {
        contents.StackPolicyBody = __expectString(output["StackPolicyBody"]);
    }
    return contents;
};
const deserializeAws_queryGetTemplateOutput = (output, context) => {
    const contents = {
        TemplateBody: undefined,
        StagesAvailable: undefined,
    };
    if (output["TemplateBody"] !== undefined) {
        contents.TemplateBody = __expectString(output["TemplateBody"]);
    }
    if (output.StagesAvailable === "") {
        contents.StagesAvailable = [];
    }
    else if (output["StagesAvailable"] !== undefined && output["StagesAvailable"]["member"] !== undefined) {
        contents.StagesAvailable = deserializeAws_queryStageList(__getArrayIfSingleItem(output["StagesAvailable"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryGetTemplateSummaryOutput = (output, context) => {
    const contents = {
        Parameters: undefined,
        Description: undefined,
        Capabilities: undefined,
        CapabilitiesReason: undefined,
        ResourceTypes: undefined,
        Version: undefined,
        Metadata: undefined,
        DeclaredTransforms: undefined,
        ResourceIdentifierSummaries: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["member"] !== undefined) {
        contents.Parameters = deserializeAws_queryParameterDeclarations(__getArrayIfSingleItem(output["Parameters"]["member"]), context);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output.Capabilities === "") {
        contents.Capabilities = [];
    }
    else if (output["Capabilities"] !== undefined && output["Capabilities"]["member"] !== undefined) {
        contents.Capabilities = deserializeAws_queryCapabilities(__getArrayIfSingleItem(output["Capabilities"]["member"]), context);
    }
    if (output["CapabilitiesReason"] !== undefined) {
        contents.CapabilitiesReason = __expectString(output["CapabilitiesReason"]);
    }
    if (output.ResourceTypes === "") {
        contents.ResourceTypes = [];
    }
    else if (output["ResourceTypes"] !== undefined && output["ResourceTypes"]["member"] !== undefined) {
        contents.ResourceTypes = deserializeAws_queryResourceTypes(__getArrayIfSingleItem(output["ResourceTypes"]["member"]), context);
    }
    if (output["Version"] !== undefined) {
        contents.Version = __expectString(output["Version"]);
    }
    if (output["Metadata"] !== undefined) {
        contents.Metadata = __expectString(output["Metadata"]);
    }
    if (output.DeclaredTransforms === "") {
        contents.DeclaredTransforms = [];
    }
    else if (output["DeclaredTransforms"] !== undefined && output["DeclaredTransforms"]["member"] !== undefined) {
        contents.DeclaredTransforms = deserializeAws_queryTransformsList(__getArrayIfSingleItem(output["DeclaredTransforms"]["member"]), context);
    }
    if (output.ResourceIdentifierSummaries === "") {
        contents.ResourceIdentifierSummaries = [];
    }
    else if (output["ResourceIdentifierSummaries"] !== undefined &&
        output["ResourceIdentifierSummaries"]["member"] !== undefined) {
        contents.ResourceIdentifierSummaries = deserializeAws_queryResourceIdentifierSummaries(__getArrayIfSingleItem(output["ResourceIdentifierSummaries"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryImports = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryImportStacksToStackSetOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryInsufficientCapabilitiesException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidChangeSetStatusException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidOperationException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryInvalidStateTransitionException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryLimitExceededException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryListChangeSetsOutput = (output, context) => {
    const contents = {
        Summaries: undefined,
        NextToken: undefined,
    };
    if (output.Summaries === "") {
        contents.Summaries = [];
    }
    else if (output["Summaries"] !== undefined && output["Summaries"]["member"] !== undefined) {
        contents.Summaries = deserializeAws_queryChangeSetSummaries(__getArrayIfSingleItem(output["Summaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListExportsOutput = (output, context) => {
    const contents = {
        Exports: undefined,
        NextToken: undefined,
    };
    if (output.Exports === "") {
        contents.Exports = [];
    }
    else if (output["Exports"] !== undefined && output["Exports"]["member"] !== undefined) {
        contents.Exports = deserializeAws_queryExports(__getArrayIfSingleItem(output["Exports"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListImportsOutput = (output, context) => {
    const contents = {
        Imports: undefined,
        NextToken: undefined,
    };
    if (output.Imports === "") {
        contents.Imports = [];
    }
    else if (output["Imports"] !== undefined && output["Imports"]["member"] !== undefined) {
        contents.Imports = deserializeAws_queryImports(__getArrayIfSingleItem(output["Imports"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStackInstancesOutput = (output, context) => {
    const contents = {
        Summaries: undefined,
        NextToken: undefined,
    };
    if (output.Summaries === "") {
        contents.Summaries = [];
    }
    else if (output["Summaries"] !== undefined && output["Summaries"]["member"] !== undefined) {
        contents.Summaries = deserializeAws_queryStackInstanceSummaries(__getArrayIfSingleItem(output["Summaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStackResourcesOutput = (output, context) => {
    const contents = {
        StackResourceSummaries: undefined,
        NextToken: undefined,
    };
    if (output.StackResourceSummaries === "") {
        contents.StackResourceSummaries = [];
    }
    else if (output["StackResourceSummaries"] !== undefined &&
        output["StackResourceSummaries"]["member"] !== undefined) {
        contents.StackResourceSummaries = deserializeAws_queryStackResourceSummaries(__getArrayIfSingleItem(output["StackResourceSummaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStackSetOperationResultsOutput = (output, context) => {
    const contents = {
        Summaries: undefined,
        NextToken: undefined,
    };
    if (output.Summaries === "") {
        contents.Summaries = [];
    }
    else if (output["Summaries"] !== undefined && output["Summaries"]["member"] !== undefined) {
        contents.Summaries = deserializeAws_queryStackSetOperationResultSummaries(__getArrayIfSingleItem(output["Summaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStackSetOperationsOutput = (output, context) => {
    const contents = {
        Summaries: undefined,
        NextToken: undefined,
    };
    if (output.Summaries === "") {
        contents.Summaries = [];
    }
    else if (output["Summaries"] !== undefined && output["Summaries"]["member"] !== undefined) {
        contents.Summaries = deserializeAws_queryStackSetOperationSummaries(__getArrayIfSingleItem(output["Summaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStackSetsOutput = (output, context) => {
    const contents = {
        Summaries: undefined,
        NextToken: undefined,
    };
    if (output.Summaries === "") {
        contents.Summaries = [];
    }
    else if (output["Summaries"] !== undefined && output["Summaries"]["member"] !== undefined) {
        contents.Summaries = deserializeAws_queryStackSetSummaries(__getArrayIfSingleItem(output["Summaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListStacksOutput = (output, context) => {
    const contents = {
        StackSummaries: undefined,
        NextToken: undefined,
    };
    if (output.StackSummaries === "") {
        contents.StackSummaries = [];
    }
    else if (output["StackSummaries"] !== undefined && output["StackSummaries"]["member"] !== undefined) {
        contents.StackSummaries = deserializeAws_queryStackSummaries(__getArrayIfSingleItem(output["StackSummaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListTypeRegistrationsOutput = (output, context) => {
    const contents = {
        RegistrationTokenList: undefined,
        NextToken: undefined,
    };
    if (output.RegistrationTokenList === "") {
        contents.RegistrationTokenList = [];
    }
    else if (output["RegistrationTokenList"] !== undefined && output["RegistrationTokenList"]["member"] !== undefined) {
        contents.RegistrationTokenList = deserializeAws_queryRegistrationTokenList(__getArrayIfSingleItem(output["RegistrationTokenList"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListTypesOutput = (output, context) => {
    const contents = {
        TypeSummaries: undefined,
        NextToken: undefined,
    };
    if (output.TypeSummaries === "") {
        contents.TypeSummaries = [];
    }
    else if (output["TypeSummaries"] !== undefined && output["TypeSummaries"]["member"] !== undefined) {
        contents.TypeSummaries = deserializeAws_queryTypeSummaries(__getArrayIfSingleItem(output["TypeSummaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryListTypeVersionsOutput = (output, context) => {
    const contents = {
        TypeVersionSummaries: undefined,
        NextToken: undefined,
    };
    if (output.TypeVersionSummaries === "") {
        contents.TypeVersionSummaries = [];
    }
    else if (output["TypeVersionSummaries"] !== undefined && output["TypeVersionSummaries"]["member"] !== undefined) {
        contents.TypeVersionSummaries = deserializeAws_queryTypeVersionSummaries(__getArrayIfSingleItem(output["TypeVersionSummaries"]["member"]), context);
    }
    if (output["NextToken"] !== undefined) {
        contents.NextToken = __expectString(output["NextToken"]);
    }
    return contents;
};
const deserializeAws_queryLoggingConfig = (output, context) => {
    const contents = {
        LogRoleArn: undefined,
        LogGroupName: undefined,
    };
    if (output["LogRoleArn"] !== undefined) {
        contents.LogRoleArn = __expectString(output["LogRoleArn"]);
    }
    if (output["LogGroupName"] !== undefined) {
        contents.LogGroupName = __expectString(output["LogGroupName"]);
    }
    return contents;
};
const deserializeAws_queryLogicalResourceIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryManagedExecution = (output, context) => {
    const contents = {
        Active: undefined,
    };
    if (output["Active"] !== undefined) {
        contents.Active = __parseBoolean(output["Active"]);
    }
    return contents;
};
const deserializeAws_queryModuleInfo = (output, context) => {
    const contents = {
        TypeHierarchy: undefined,
        LogicalIdHierarchy: undefined,
    };
    if (output["TypeHierarchy"] !== undefined) {
        contents.TypeHierarchy = __expectString(output["TypeHierarchy"]);
    }
    if (output["LogicalIdHierarchy"] !== undefined) {
        contents.LogicalIdHierarchy = __expectString(output["LogicalIdHierarchy"]);
    }
    return contents;
};
const deserializeAws_queryNameAlreadyExistsException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryNotificationARNs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryOperationIdAlreadyExistsException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryOperationInProgressException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryOperationNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryOperationStatusCheckFailedException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryOrganizationalUnitIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryOutput = (output, context) => {
    const contents = {
        OutputKey: undefined,
        OutputValue: undefined,
        Description: undefined,
        ExportName: undefined,
    };
    if (output["OutputKey"] !== undefined) {
        contents.OutputKey = __expectString(output["OutputKey"]);
    }
    if (output["OutputValue"] !== undefined) {
        contents.OutputValue = __expectString(output["OutputValue"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["ExportName"] !== undefined) {
        contents.ExportName = __expectString(output["ExportName"]);
    }
    return contents;
};
const deserializeAws_queryOutputs = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryOutput(entry, context);
    });
};
const deserializeAws_queryParameter = (output, context) => {
    const contents = {
        ParameterKey: undefined,
        ParameterValue: undefined,
        UsePreviousValue: undefined,
        ResolvedValue: undefined,
    };
    if (output["ParameterKey"] !== undefined) {
        contents.ParameterKey = __expectString(output["ParameterKey"]);
    }
    if (output["ParameterValue"] !== undefined) {
        contents.ParameterValue = __expectString(output["ParameterValue"]);
    }
    if (output["UsePreviousValue"] !== undefined) {
        contents.UsePreviousValue = __parseBoolean(output["UsePreviousValue"]);
    }
    if (output["ResolvedValue"] !== undefined) {
        contents.ResolvedValue = __expectString(output["ResolvedValue"]);
    }
    return contents;
};
const deserializeAws_queryParameterConstraints = (output, context) => {
    const contents = {
        AllowedValues: undefined,
    };
    if (output.AllowedValues === "") {
        contents.AllowedValues = [];
    }
    else if (output["AllowedValues"] !== undefined && output["AllowedValues"]["member"] !== undefined) {
        contents.AllowedValues = deserializeAws_queryAllowedValues(__getArrayIfSingleItem(output["AllowedValues"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryParameterDeclaration = (output, context) => {
    const contents = {
        ParameterKey: undefined,
        DefaultValue: undefined,
        ParameterType: undefined,
        NoEcho: undefined,
        Description: undefined,
        ParameterConstraints: undefined,
    };
    if (output["ParameterKey"] !== undefined) {
        contents.ParameterKey = __expectString(output["ParameterKey"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["ParameterType"] !== undefined) {
        contents.ParameterType = __expectString(output["ParameterType"]);
    }
    if (output["NoEcho"] !== undefined) {
        contents.NoEcho = __parseBoolean(output["NoEcho"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["ParameterConstraints"] !== undefined) {
        contents.ParameterConstraints = deserializeAws_queryParameterConstraints(output["ParameterConstraints"], context);
    }
    return contents;
};
const deserializeAws_queryParameterDeclarations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryParameterDeclaration(entry, context);
    });
};
const deserializeAws_queryParameters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryParameter(entry, context);
    });
};
const deserializeAws_queryPhysicalResourceIdContext = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPhysicalResourceIdContextKeyValuePair(entry, context);
    });
};
const deserializeAws_queryPhysicalResourceIdContextKeyValuePair = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryPropertyDifference = (output, context) => {
    const contents = {
        PropertyPath: undefined,
        ExpectedValue: undefined,
        ActualValue: undefined,
        DifferenceType: undefined,
    };
    if (output["PropertyPath"] !== undefined) {
        contents.PropertyPath = __expectString(output["PropertyPath"]);
    }
    if (output["ExpectedValue"] !== undefined) {
        contents.ExpectedValue = __expectString(output["ExpectedValue"]);
    }
    if (output["ActualValue"] !== undefined) {
        contents.ActualValue = __expectString(output["ActualValue"]);
    }
    if (output["DifferenceType"] !== undefined) {
        contents.DifferenceType = __expectString(output["DifferenceType"]);
    }
    return contents;
};
const deserializeAws_queryPropertyDifferences = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryPropertyDifference(entry, context);
    });
};
const deserializeAws_queryPublishTypeOutput = (output, context) => {
    const contents = {
        PublicTypeArn: undefined,
    };
    if (output["PublicTypeArn"] !== undefined) {
        contents.PublicTypeArn = __expectString(output["PublicTypeArn"]);
    }
    return contents;
};
const deserializeAws_queryRecordHandlerProgressOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryRegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryRegisterPublisherOutput = (output, context) => {
    const contents = {
        PublisherId: undefined,
    };
    if (output["PublisherId"] !== undefined) {
        contents.PublisherId = __expectString(output["PublisherId"]);
    }
    return contents;
};
const deserializeAws_queryRegisterTypeOutput = (output, context) => {
    const contents = {
        RegistrationToken: undefined,
    };
    if (output["RegistrationToken"] !== undefined) {
        contents.RegistrationToken = __expectString(output["RegistrationToken"]);
    }
    return contents;
};
const deserializeAws_queryRegistrationTokenList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryRequiredActivatedType = (output, context) => {
    const contents = {
        TypeNameAlias: undefined,
        OriginalTypeName: undefined,
        PublisherId: undefined,
        SupportedMajorVersions: undefined,
    };
    if (output["TypeNameAlias"] !== undefined) {
        contents.TypeNameAlias = __expectString(output["TypeNameAlias"]);
    }
    if (output["OriginalTypeName"] !== undefined) {
        contents.OriginalTypeName = __expectString(output["OriginalTypeName"]);
    }
    if (output["PublisherId"] !== undefined) {
        contents.PublisherId = __expectString(output["PublisherId"]);
    }
    if (output.SupportedMajorVersions === "") {
        contents.SupportedMajorVersions = [];
    }
    else if (output["SupportedMajorVersions"] !== undefined &&
        output["SupportedMajorVersions"]["member"] !== undefined) {
        contents.SupportedMajorVersions = deserializeAws_querySupportedMajorVersions(__getArrayIfSingleItem(output["SupportedMajorVersions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryRequiredActivatedTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRequiredActivatedType(entry, context);
    });
};
const deserializeAws_queryResourceChange = (output, context) => {
    const contents = {
        Action: undefined,
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        ResourceType: undefined,
        Replacement: undefined,
        Scope: undefined,
        Details: undefined,
        ChangeSetId: undefined,
        ModuleInfo: undefined,
    };
    if (output["Action"] !== undefined) {
        contents.Action = __expectString(output["Action"]);
    }
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["Replacement"] !== undefined) {
        contents.Replacement = __expectString(output["Replacement"]);
    }
    if (output.Scope === "") {
        contents.Scope = [];
    }
    else if (output["Scope"] !== undefined && output["Scope"]["member"] !== undefined) {
        contents.Scope = deserializeAws_queryScope(__getArrayIfSingleItem(output["Scope"]["member"]), context);
    }
    if (output.Details === "") {
        contents.Details = [];
    }
    else if (output["Details"] !== undefined && output["Details"]["member"] !== undefined) {
        contents.Details = deserializeAws_queryResourceChangeDetails(__getArrayIfSingleItem(output["Details"]["member"]), context);
    }
    if (output["ChangeSetId"] !== undefined) {
        contents.ChangeSetId = __expectString(output["ChangeSetId"]);
    }
    if (output["ModuleInfo"] !== undefined) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
    }
    return contents;
};
const deserializeAws_queryResourceChangeDetail = (output, context) => {
    const contents = {
        Target: undefined,
        Evaluation: undefined,
        ChangeSource: undefined,
        CausingEntity: undefined,
    };
    if (output["Target"] !== undefined) {
        contents.Target = deserializeAws_queryResourceTargetDefinition(output["Target"], context);
    }
    if (output["Evaluation"] !== undefined) {
        contents.Evaluation = __expectString(output["Evaluation"]);
    }
    if (output["ChangeSource"] !== undefined) {
        contents.ChangeSource = __expectString(output["ChangeSource"]);
    }
    if (output["CausingEntity"] !== undefined) {
        contents.CausingEntity = __expectString(output["CausingEntity"]);
    }
    return contents;
};
const deserializeAws_queryResourceChangeDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryResourceChangeDetail(entry, context);
    });
};
const deserializeAws_queryResourceIdentifiers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryResourceIdentifierSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryResourceIdentifierSummary(entry, context);
    });
};
const deserializeAws_queryResourceIdentifierSummary = (output, context) => {
    const contents = {
        ResourceType: undefined,
        LogicalResourceIds: undefined,
        ResourceIdentifiers: undefined,
    };
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output.LogicalResourceIds === "") {
        contents.LogicalResourceIds = [];
    }
    else if (output["LogicalResourceIds"] !== undefined && output["LogicalResourceIds"]["member"] !== undefined) {
        contents.LogicalResourceIds = deserializeAws_queryLogicalResourceIds(__getArrayIfSingleItem(output["LogicalResourceIds"]["member"]), context);
    }
    if (output.ResourceIdentifiers === "") {
        contents.ResourceIdentifiers = [];
    }
    else if (output["ResourceIdentifiers"] !== undefined && output["ResourceIdentifiers"]["member"] !== undefined) {
        contents.ResourceIdentifiers = deserializeAws_queryResourceIdentifiers(__getArrayIfSingleItem(output["ResourceIdentifiers"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryResourceTargetDefinition = (output, context) => {
    const contents = {
        Attribute: undefined,
        Name: undefined,
        RequiresRecreation: undefined,
    };
    if (output["Attribute"] !== undefined) {
        contents.Attribute = __expectString(output["Attribute"]);
    }
    if (output["Name"] !== undefined) {
        contents.Name = __expectString(output["Name"]);
    }
    if (output["RequiresRecreation"] !== undefined) {
        contents.RequiresRecreation = __expectString(output["RequiresRecreation"]);
    }
    return contents;
};
const deserializeAws_queryResourceTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryRollbackConfiguration = (output, context) => {
    const contents = {
        RollbackTriggers: undefined,
        MonitoringTimeInMinutes: undefined,
    };
    if (output.RollbackTriggers === "") {
        contents.RollbackTriggers = [];
    }
    else if (output["RollbackTriggers"] !== undefined && output["RollbackTriggers"]["member"] !== undefined) {
        contents.RollbackTriggers = deserializeAws_queryRollbackTriggers(__getArrayIfSingleItem(output["RollbackTriggers"]["member"]), context);
    }
    if (output["MonitoringTimeInMinutes"] !== undefined) {
        contents.MonitoringTimeInMinutes = __strictParseInt32(output["MonitoringTimeInMinutes"]);
    }
    return contents;
};
const deserializeAws_queryRollbackStackOutput = (output, context) => {
    const contents = {
        StackId: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    return contents;
};
const deserializeAws_queryRollbackTrigger = (output, context) => {
    const contents = {
        Arn: undefined,
        Type: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    return contents;
};
const deserializeAws_queryRollbackTriggers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryRollbackTrigger(entry, context);
    });
};
const deserializeAws_queryScope = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_querySetTypeConfigurationOutput = (output, context) => {
    const contents = {
        ConfigurationArn: undefined,
    };
    if (output["ConfigurationArn"] !== undefined) {
        contents.ConfigurationArn = __expectString(output["ConfigurationArn"]);
    }
    return contents;
};
const deserializeAws_querySetTypeDefaultVersionOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_queryStack = (output, context) => {
    const contents = {
        StackId: undefined,
        StackName: undefined,
        ChangeSetId: undefined,
        Description: undefined,
        Parameters: undefined,
        CreationTime: undefined,
        DeletionTime: undefined,
        LastUpdatedTime: undefined,
        RollbackConfiguration: undefined,
        StackStatus: undefined,
        StackStatusReason: undefined,
        DisableRollback: undefined,
        NotificationARNs: undefined,
        TimeoutInMinutes: undefined,
        Capabilities: undefined,
        Outputs: undefined,
        RoleARN: undefined,
        Tags: undefined,
        EnableTerminationProtection: undefined,
        ParentId: undefined,
        RootId: undefined,
        DriftInformation: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["ChangeSetId"] !== undefined) {
        contents.ChangeSetId = __expectString(output["ChangeSetId"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["member"] !== undefined) {
        contents.Parameters = deserializeAws_queryParameters(__getArrayIfSingleItem(output["Parameters"]["member"]), context);
    }
    if (output["CreationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTime"]));
    }
    if (output["DeletionTime"] !== undefined) {
        contents.DeletionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DeletionTime"]));
    }
    if (output["LastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdatedTime"]));
    }
    if (output["RollbackConfiguration"] !== undefined) {
        contents.RollbackConfiguration = deserializeAws_queryRollbackConfiguration(output["RollbackConfiguration"], context);
    }
    if (output["StackStatus"] !== undefined) {
        contents.StackStatus = __expectString(output["StackStatus"]);
    }
    if (output["StackStatusReason"] !== undefined) {
        contents.StackStatusReason = __expectString(output["StackStatusReason"]);
    }
    if (output["DisableRollback"] !== undefined) {
        contents.DisableRollback = __parseBoolean(output["DisableRollback"]);
    }
    if (output.NotificationARNs === "") {
        contents.NotificationARNs = [];
    }
    else if (output["NotificationARNs"] !== undefined && output["NotificationARNs"]["member"] !== undefined) {
        contents.NotificationARNs = deserializeAws_queryNotificationARNs(__getArrayIfSingleItem(output["NotificationARNs"]["member"]), context);
    }
    if (output["TimeoutInMinutes"] !== undefined) {
        contents.TimeoutInMinutes = __strictParseInt32(output["TimeoutInMinutes"]);
    }
    if (output.Capabilities === "") {
        contents.Capabilities = [];
    }
    else if (output["Capabilities"] !== undefined && output["Capabilities"]["member"] !== undefined) {
        contents.Capabilities = deserializeAws_queryCapabilities(__getArrayIfSingleItem(output["Capabilities"]["member"]), context);
    }
    if (output.Outputs === "") {
        contents.Outputs = [];
    }
    else if (output["Outputs"] !== undefined && output["Outputs"]["member"] !== undefined) {
        contents.Outputs = deserializeAws_queryOutputs(__getArrayIfSingleItem(output["Outputs"]["member"]), context);
    }
    if (output["RoleARN"] !== undefined) {
        contents.RoleARN = __expectString(output["RoleARN"]);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["member"] !== undefined) {
        contents.Tags = deserializeAws_queryTags(__getArrayIfSingleItem(output["Tags"]["member"]), context);
    }
    if (output["EnableTerminationProtection"] !== undefined) {
        contents.EnableTerminationProtection = __parseBoolean(output["EnableTerminationProtection"]);
    }
    if (output["ParentId"] !== undefined) {
        contents.ParentId = __expectString(output["ParentId"]);
    }
    if (output["RootId"] !== undefined) {
        contents.RootId = __expectString(output["RootId"]);
    }
    if (output["DriftInformation"] !== undefined) {
        contents.DriftInformation = deserializeAws_queryStackDriftInformation(output["DriftInformation"], context);
    }
    return contents;
};
const deserializeAws_queryStackDriftInformation = (output, context) => {
    const contents = {
        StackDriftStatus: undefined,
        LastCheckTimestamp: undefined,
    };
    if (output["StackDriftStatus"] !== undefined) {
        contents.StackDriftStatus = __expectString(output["StackDriftStatus"]);
    }
    if (output["LastCheckTimestamp"] !== undefined) {
        contents.LastCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastCheckTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryStackDriftInformationSummary = (output, context) => {
    const contents = {
        StackDriftStatus: undefined,
        LastCheckTimestamp: undefined,
    };
    if (output["StackDriftStatus"] !== undefined) {
        contents.StackDriftStatus = __expectString(output["StackDriftStatus"]);
    }
    if (output["LastCheckTimestamp"] !== undefined) {
        contents.LastCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastCheckTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryStackEvent = (output, context) => {
    const contents = {
        StackId: undefined,
        EventId: undefined,
        StackName: undefined,
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        ResourceType: undefined,
        Timestamp: undefined,
        ResourceStatus: undefined,
        ResourceStatusReason: undefined,
        ResourceProperties: undefined,
        ClientRequestToken: undefined,
        HookType: undefined,
        HookStatus: undefined,
        HookStatusReason: undefined,
        HookInvocationPoint: undefined,
        HookFailureMode: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["EventId"] !== undefined) {
        contents.EventId = __expectString(output["EventId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["Timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["Timestamp"]));
    }
    if (output["ResourceStatus"] !== undefined) {
        contents.ResourceStatus = __expectString(output["ResourceStatus"]);
    }
    if (output["ResourceStatusReason"] !== undefined) {
        contents.ResourceStatusReason = __expectString(output["ResourceStatusReason"]);
    }
    if (output["ResourceProperties"] !== undefined) {
        contents.ResourceProperties = __expectString(output["ResourceProperties"]);
    }
    if (output["ClientRequestToken"] !== undefined) {
        contents.ClientRequestToken = __expectString(output["ClientRequestToken"]);
    }
    if (output["HookType"] !== undefined) {
        contents.HookType = __expectString(output["HookType"]);
    }
    if (output["HookStatus"] !== undefined) {
        contents.HookStatus = __expectString(output["HookStatus"]);
    }
    if (output["HookStatusReason"] !== undefined) {
        contents.HookStatusReason = __expectString(output["HookStatusReason"]);
    }
    if (output["HookInvocationPoint"] !== undefined) {
        contents.HookInvocationPoint = __expectString(output["HookInvocationPoint"]);
    }
    if (output["HookFailureMode"] !== undefined) {
        contents.HookFailureMode = __expectString(output["HookFailureMode"]);
    }
    return contents;
};
const deserializeAws_queryStackEvents = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackEvent(entry, context);
    });
};
const deserializeAws_queryStackInstance = (output, context) => {
    const contents = {
        StackSetId: undefined,
        Region: undefined,
        Account: undefined,
        StackId: undefined,
        ParameterOverrides: undefined,
        Status: undefined,
        StackInstanceStatus: undefined,
        StatusReason: undefined,
        OrganizationalUnitId: undefined,
        DriftStatus: undefined,
        LastDriftCheckTimestamp: undefined,
        LastOperationId: undefined,
    };
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["Account"] !== undefined) {
        contents.Account = __expectString(output["Account"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output.ParameterOverrides === "") {
        contents.ParameterOverrides = [];
    }
    else if (output["ParameterOverrides"] !== undefined && output["ParameterOverrides"]["member"] !== undefined) {
        contents.ParameterOverrides = deserializeAws_queryParameters(__getArrayIfSingleItem(output["ParameterOverrides"]["member"]), context);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StackInstanceStatus"] !== undefined) {
        contents.StackInstanceStatus = deserializeAws_queryStackInstanceComprehensiveStatus(output["StackInstanceStatus"], context);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["OrganizationalUnitId"] !== undefined) {
        contents.OrganizationalUnitId = __expectString(output["OrganizationalUnitId"]);
    }
    if (output["DriftStatus"] !== undefined) {
        contents.DriftStatus = __expectString(output["DriftStatus"]);
    }
    if (output["LastDriftCheckTimestamp"] !== undefined) {
        contents.LastDriftCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastDriftCheckTimestamp"]));
    }
    if (output["LastOperationId"] !== undefined) {
        contents.LastOperationId = __expectString(output["LastOperationId"]);
    }
    return contents;
};
const deserializeAws_queryStackInstanceComprehensiveStatus = (output, context) => {
    const contents = {
        DetailedStatus: undefined,
    };
    if (output["DetailedStatus"] !== undefined) {
        contents.DetailedStatus = __expectString(output["DetailedStatus"]);
    }
    return contents;
};
const deserializeAws_queryStackInstanceNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryStackInstanceSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackInstanceSummary(entry, context);
    });
};
const deserializeAws_queryStackInstanceSummary = (output, context) => {
    const contents = {
        StackSetId: undefined,
        Region: undefined,
        Account: undefined,
        StackId: undefined,
        Status: undefined,
        StatusReason: undefined,
        StackInstanceStatus: undefined,
        OrganizationalUnitId: undefined,
        DriftStatus: undefined,
        LastDriftCheckTimestamp: undefined,
        LastOperationId: undefined,
    };
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["Account"] !== undefined) {
        contents.Account = __expectString(output["Account"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["StackInstanceStatus"] !== undefined) {
        contents.StackInstanceStatus = deserializeAws_queryStackInstanceComprehensiveStatus(output["StackInstanceStatus"], context);
    }
    if (output["OrganizationalUnitId"] !== undefined) {
        contents.OrganizationalUnitId = __expectString(output["OrganizationalUnitId"]);
    }
    if (output["DriftStatus"] !== undefined) {
        contents.DriftStatus = __expectString(output["DriftStatus"]);
    }
    if (output["LastDriftCheckTimestamp"] !== undefined) {
        contents.LastDriftCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastDriftCheckTimestamp"]));
    }
    if (output["LastOperationId"] !== undefined) {
        contents.LastOperationId = __expectString(output["LastOperationId"]);
    }
    return contents;
};
const deserializeAws_queryStackNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryStackResource = (output, context) => {
    const contents = {
        StackName: undefined,
        StackId: undefined,
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        ResourceType: undefined,
        Timestamp: undefined,
        ResourceStatus: undefined,
        ResourceStatusReason: undefined,
        Description: undefined,
        DriftInformation: undefined,
        ModuleInfo: undefined,
    };
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["Timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["Timestamp"]));
    }
    if (output["ResourceStatus"] !== undefined) {
        contents.ResourceStatus = __expectString(output["ResourceStatus"]);
    }
    if (output["ResourceStatusReason"] !== undefined) {
        contents.ResourceStatusReason = __expectString(output["ResourceStatusReason"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["DriftInformation"] !== undefined) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformation(output["DriftInformation"], context);
    }
    if (output["ModuleInfo"] !== undefined) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
    }
    return contents;
};
const deserializeAws_queryStackResourceDetail = (output, context) => {
    const contents = {
        StackName: undefined,
        StackId: undefined,
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        ResourceType: undefined,
        LastUpdatedTimestamp: undefined,
        ResourceStatus: undefined,
        ResourceStatusReason: undefined,
        Description: undefined,
        Metadata: undefined,
        DriftInformation: undefined,
        ModuleInfo: undefined,
    };
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["LastUpdatedTimestamp"] !== undefined) {
        contents.LastUpdatedTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdatedTimestamp"]));
    }
    if (output["ResourceStatus"] !== undefined) {
        contents.ResourceStatus = __expectString(output["ResourceStatus"]);
    }
    if (output["ResourceStatusReason"] !== undefined) {
        contents.ResourceStatusReason = __expectString(output["ResourceStatusReason"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Metadata"] !== undefined) {
        contents.Metadata = __expectString(output["Metadata"]);
    }
    if (output["DriftInformation"] !== undefined) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformation(output["DriftInformation"], context);
    }
    if (output["ModuleInfo"] !== undefined) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
    }
    return contents;
};
const deserializeAws_queryStackResourceDrift = (output, context) => {
    const contents = {
        StackId: undefined,
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        PhysicalResourceIdContext: undefined,
        ResourceType: undefined,
        ExpectedProperties: undefined,
        ActualProperties: undefined,
        PropertyDifferences: undefined,
        StackResourceDriftStatus: undefined,
        Timestamp: undefined,
        ModuleInfo: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output.PhysicalResourceIdContext === "") {
        contents.PhysicalResourceIdContext = [];
    }
    else if (output["PhysicalResourceIdContext"] !== undefined &&
        output["PhysicalResourceIdContext"]["member"] !== undefined) {
        contents.PhysicalResourceIdContext = deserializeAws_queryPhysicalResourceIdContext(__getArrayIfSingleItem(output["PhysicalResourceIdContext"]["member"]), context);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["ExpectedProperties"] !== undefined) {
        contents.ExpectedProperties = __expectString(output["ExpectedProperties"]);
    }
    if (output["ActualProperties"] !== undefined) {
        contents.ActualProperties = __expectString(output["ActualProperties"]);
    }
    if (output.PropertyDifferences === "") {
        contents.PropertyDifferences = [];
    }
    else if (output["PropertyDifferences"] !== undefined && output["PropertyDifferences"]["member"] !== undefined) {
        contents.PropertyDifferences = deserializeAws_queryPropertyDifferences(__getArrayIfSingleItem(output["PropertyDifferences"]["member"]), context);
    }
    if (output["StackResourceDriftStatus"] !== undefined) {
        contents.StackResourceDriftStatus = __expectString(output["StackResourceDriftStatus"]);
    }
    if (output["Timestamp"] !== undefined) {
        contents.Timestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["Timestamp"]));
    }
    if (output["ModuleInfo"] !== undefined) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
    }
    return contents;
};
const deserializeAws_queryStackResourceDriftInformation = (output, context) => {
    const contents = {
        StackResourceDriftStatus: undefined,
        LastCheckTimestamp: undefined,
    };
    if (output["StackResourceDriftStatus"] !== undefined) {
        contents.StackResourceDriftStatus = __expectString(output["StackResourceDriftStatus"]);
    }
    if (output["LastCheckTimestamp"] !== undefined) {
        contents.LastCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastCheckTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryStackResourceDriftInformationSummary = (output, context) => {
    const contents = {
        StackResourceDriftStatus: undefined,
        LastCheckTimestamp: undefined,
    };
    if (output["StackResourceDriftStatus"] !== undefined) {
        contents.StackResourceDriftStatus = __expectString(output["StackResourceDriftStatus"]);
    }
    if (output["LastCheckTimestamp"] !== undefined) {
        contents.LastCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastCheckTimestamp"]));
    }
    return contents;
};
const deserializeAws_queryStackResourceDrifts = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackResourceDrift(entry, context);
    });
};
const deserializeAws_queryStackResources = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackResource(entry, context);
    });
};
const deserializeAws_queryStackResourceSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackResourceSummary(entry, context);
    });
};
const deserializeAws_queryStackResourceSummary = (output, context) => {
    const contents = {
        LogicalResourceId: undefined,
        PhysicalResourceId: undefined,
        ResourceType: undefined,
        LastUpdatedTimestamp: undefined,
        ResourceStatus: undefined,
        ResourceStatusReason: undefined,
        DriftInformation: undefined,
        ModuleInfo: undefined,
    };
    if (output["LogicalResourceId"] !== undefined) {
        contents.LogicalResourceId = __expectString(output["LogicalResourceId"]);
    }
    if (output["PhysicalResourceId"] !== undefined) {
        contents.PhysicalResourceId = __expectString(output["PhysicalResourceId"]);
    }
    if (output["ResourceType"] !== undefined) {
        contents.ResourceType = __expectString(output["ResourceType"]);
    }
    if (output["LastUpdatedTimestamp"] !== undefined) {
        contents.LastUpdatedTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdatedTimestamp"]));
    }
    if (output["ResourceStatus"] !== undefined) {
        contents.ResourceStatus = __expectString(output["ResourceStatus"]);
    }
    if (output["ResourceStatusReason"] !== undefined) {
        contents.ResourceStatusReason = __expectString(output["ResourceStatusReason"]);
    }
    if (output["DriftInformation"] !== undefined) {
        contents.DriftInformation = deserializeAws_queryStackResourceDriftInformationSummary(output["DriftInformation"], context);
    }
    if (output["ModuleInfo"] !== undefined) {
        contents.ModuleInfo = deserializeAws_queryModuleInfo(output["ModuleInfo"], context);
    }
    return contents;
};
const deserializeAws_queryStacks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStack(entry, context);
    });
};
const deserializeAws_queryStackSet = (output, context) => {
    const contents = {
        StackSetName: undefined,
        StackSetId: undefined,
        Description: undefined,
        Status: undefined,
        TemplateBody: undefined,
        Parameters: undefined,
        Capabilities: undefined,
        Tags: undefined,
        StackSetARN: undefined,
        AdministrationRoleARN: undefined,
        ExecutionRoleName: undefined,
        StackSetDriftDetectionDetails: undefined,
        AutoDeployment: undefined,
        PermissionModel: undefined,
        OrganizationalUnitIds: undefined,
        ManagedExecution: undefined,
        Regions: undefined,
    };
    if (output["StackSetName"] !== undefined) {
        contents.StackSetName = __expectString(output["StackSetName"]);
    }
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["TemplateBody"] !== undefined) {
        contents.TemplateBody = __expectString(output["TemplateBody"]);
    }
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["member"] !== undefined) {
        contents.Parameters = deserializeAws_queryParameters(__getArrayIfSingleItem(output["Parameters"]["member"]), context);
    }
    if (output.Capabilities === "") {
        contents.Capabilities = [];
    }
    else if (output["Capabilities"] !== undefined && output["Capabilities"]["member"] !== undefined) {
        contents.Capabilities = deserializeAws_queryCapabilities(__getArrayIfSingleItem(output["Capabilities"]["member"]), context);
    }
    if (output.Tags === "") {
        contents.Tags = [];
    }
    else if (output["Tags"] !== undefined && output["Tags"]["member"] !== undefined) {
        contents.Tags = deserializeAws_queryTags(__getArrayIfSingleItem(output["Tags"]["member"]), context);
    }
    if (output["StackSetARN"] !== undefined) {
        contents.StackSetARN = __expectString(output["StackSetARN"]);
    }
    if (output["AdministrationRoleARN"] !== undefined) {
        contents.AdministrationRoleARN = __expectString(output["AdministrationRoleARN"]);
    }
    if (output["ExecutionRoleName"] !== undefined) {
        contents.ExecutionRoleName = __expectString(output["ExecutionRoleName"]);
    }
    if (output["StackSetDriftDetectionDetails"] !== undefined) {
        contents.StackSetDriftDetectionDetails = deserializeAws_queryStackSetDriftDetectionDetails(output["StackSetDriftDetectionDetails"], context);
    }
    if (output["AutoDeployment"] !== undefined) {
        contents.AutoDeployment = deserializeAws_queryAutoDeployment(output["AutoDeployment"], context);
    }
    if (output["PermissionModel"] !== undefined) {
        contents.PermissionModel = __expectString(output["PermissionModel"]);
    }
    if (output.OrganizationalUnitIds === "") {
        contents.OrganizationalUnitIds = [];
    }
    else if (output["OrganizationalUnitIds"] !== undefined && output["OrganizationalUnitIds"]["member"] !== undefined) {
        contents.OrganizationalUnitIds = deserializeAws_queryOrganizationalUnitIdList(__getArrayIfSingleItem(output["OrganizationalUnitIds"]["member"]), context);
    }
    if (output["ManagedExecution"] !== undefined) {
        contents.ManagedExecution = deserializeAws_queryManagedExecution(output["ManagedExecution"], context);
    }
    if (output.Regions === "") {
        contents.Regions = [];
    }
    else if (output["Regions"] !== undefined && output["Regions"]["member"] !== undefined) {
        contents.Regions = deserializeAws_queryRegionList(__getArrayIfSingleItem(output["Regions"]["member"]), context);
    }
    return contents;
};
const deserializeAws_queryStackSetDriftDetectionDetails = (output, context) => {
    const contents = {
        DriftStatus: undefined,
        DriftDetectionStatus: undefined,
        LastDriftCheckTimestamp: undefined,
        TotalStackInstancesCount: undefined,
        DriftedStackInstancesCount: undefined,
        InSyncStackInstancesCount: undefined,
        InProgressStackInstancesCount: undefined,
        FailedStackInstancesCount: undefined,
    };
    if (output["DriftStatus"] !== undefined) {
        contents.DriftStatus = __expectString(output["DriftStatus"]);
    }
    if (output["DriftDetectionStatus"] !== undefined) {
        contents.DriftDetectionStatus = __expectString(output["DriftDetectionStatus"]);
    }
    if (output["LastDriftCheckTimestamp"] !== undefined) {
        contents.LastDriftCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastDriftCheckTimestamp"]));
    }
    if (output["TotalStackInstancesCount"] !== undefined) {
        contents.TotalStackInstancesCount = __strictParseInt32(output["TotalStackInstancesCount"]);
    }
    if (output["DriftedStackInstancesCount"] !== undefined) {
        contents.DriftedStackInstancesCount = __strictParseInt32(output["DriftedStackInstancesCount"]);
    }
    if (output["InSyncStackInstancesCount"] !== undefined) {
        contents.InSyncStackInstancesCount = __strictParseInt32(output["InSyncStackInstancesCount"]);
    }
    if (output["InProgressStackInstancesCount"] !== undefined) {
        contents.InProgressStackInstancesCount = __strictParseInt32(output["InProgressStackInstancesCount"]);
    }
    if (output["FailedStackInstancesCount"] !== undefined) {
        contents.FailedStackInstancesCount = __strictParseInt32(output["FailedStackInstancesCount"]);
    }
    return contents;
};
const deserializeAws_queryStackSetNotEmptyException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryStackSetNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryStackSetOperation = (output, context) => {
    const contents = {
        OperationId: undefined,
        StackSetId: undefined,
        Action: undefined,
        Status: undefined,
        OperationPreferences: undefined,
        RetainStacks: undefined,
        AdministrationRoleARN: undefined,
        ExecutionRoleName: undefined,
        CreationTimestamp: undefined,
        EndTimestamp: undefined,
        DeploymentTargets: undefined,
        StackSetDriftDetectionDetails: undefined,
        StatusReason: undefined,
        StatusDetails: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    if (output["Action"] !== undefined) {
        contents.Action = __expectString(output["Action"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["OperationPreferences"] !== undefined) {
        contents.OperationPreferences = deserializeAws_queryStackSetOperationPreferences(output["OperationPreferences"], context);
    }
    if (output["RetainStacks"] !== undefined) {
        contents.RetainStacks = __parseBoolean(output["RetainStacks"]);
    }
    if (output["AdministrationRoleARN"] !== undefined) {
        contents.AdministrationRoleARN = __expectString(output["AdministrationRoleARN"]);
    }
    if (output["ExecutionRoleName"] !== undefined) {
        contents.ExecutionRoleName = __expectString(output["ExecutionRoleName"]);
    }
    if (output["CreationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTimestamp"]));
    }
    if (output["EndTimestamp"] !== undefined) {
        contents.EndTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["EndTimestamp"]));
    }
    if (output["DeploymentTargets"] !== undefined) {
        contents.DeploymentTargets = deserializeAws_queryDeploymentTargets(output["DeploymentTargets"], context);
    }
    if (output["StackSetDriftDetectionDetails"] !== undefined) {
        contents.StackSetDriftDetectionDetails = deserializeAws_queryStackSetDriftDetectionDetails(output["StackSetDriftDetectionDetails"], context);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["StatusDetails"] !== undefined) {
        contents.StatusDetails = deserializeAws_queryStackSetOperationStatusDetails(output["StatusDetails"], context);
    }
    return contents;
};
const deserializeAws_queryStackSetOperationPreferences = (output, context) => {
    const contents = {
        RegionConcurrencyType: undefined,
        RegionOrder: undefined,
        FailureToleranceCount: undefined,
        FailureTolerancePercentage: undefined,
        MaxConcurrentCount: undefined,
        MaxConcurrentPercentage: undefined,
    };
    if (output["RegionConcurrencyType"] !== undefined) {
        contents.RegionConcurrencyType = __expectString(output["RegionConcurrencyType"]);
    }
    if (output.RegionOrder === "") {
        contents.RegionOrder = [];
    }
    else if (output["RegionOrder"] !== undefined && output["RegionOrder"]["member"] !== undefined) {
        contents.RegionOrder = deserializeAws_queryRegionList(__getArrayIfSingleItem(output["RegionOrder"]["member"]), context);
    }
    if (output["FailureToleranceCount"] !== undefined) {
        contents.FailureToleranceCount = __strictParseInt32(output["FailureToleranceCount"]);
    }
    if (output["FailureTolerancePercentage"] !== undefined) {
        contents.FailureTolerancePercentage = __strictParseInt32(output["FailureTolerancePercentage"]);
    }
    if (output["MaxConcurrentCount"] !== undefined) {
        contents.MaxConcurrentCount = __strictParseInt32(output["MaxConcurrentCount"]);
    }
    if (output["MaxConcurrentPercentage"] !== undefined) {
        contents.MaxConcurrentPercentage = __strictParseInt32(output["MaxConcurrentPercentage"]);
    }
    return contents;
};
const deserializeAws_queryStackSetOperationResultSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackSetOperationResultSummary(entry, context);
    });
};
const deserializeAws_queryStackSetOperationResultSummary = (output, context) => {
    const contents = {
        Account: undefined,
        Region: undefined,
        Status: undefined,
        StatusReason: undefined,
        AccountGateResult: undefined,
        OrganizationalUnitId: undefined,
    };
    if (output["Account"] !== undefined) {
        contents.Account = __expectString(output["Account"]);
    }
    if (output["Region"] !== undefined) {
        contents.Region = __expectString(output["Region"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["AccountGateResult"] !== undefined) {
        contents.AccountGateResult = deserializeAws_queryAccountGateResult(output["AccountGateResult"], context);
    }
    if (output["OrganizationalUnitId"] !== undefined) {
        contents.OrganizationalUnitId = __expectString(output["OrganizationalUnitId"]);
    }
    return contents;
};
const deserializeAws_queryStackSetOperationStatusDetails = (output, context) => {
    const contents = {
        FailedStackInstancesCount: undefined,
    };
    if (output["FailedStackInstancesCount"] !== undefined) {
        contents.FailedStackInstancesCount = __strictParseInt32(output["FailedStackInstancesCount"]);
    }
    return contents;
};
const deserializeAws_queryStackSetOperationSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackSetOperationSummary(entry, context);
    });
};
const deserializeAws_queryStackSetOperationSummary = (output, context) => {
    const contents = {
        OperationId: undefined,
        Action: undefined,
        Status: undefined,
        CreationTimestamp: undefined,
        EndTimestamp: undefined,
        StatusReason: undefined,
        StatusDetails: undefined,
        OperationPreferences: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    if (output["Action"] !== undefined) {
        contents.Action = __expectString(output["Action"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["CreationTimestamp"] !== undefined) {
        contents.CreationTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTimestamp"]));
    }
    if (output["EndTimestamp"] !== undefined) {
        contents.EndTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["EndTimestamp"]));
    }
    if (output["StatusReason"] !== undefined) {
        contents.StatusReason = __expectString(output["StatusReason"]);
    }
    if (output["StatusDetails"] !== undefined) {
        contents.StatusDetails = deserializeAws_queryStackSetOperationStatusDetails(output["StatusDetails"], context);
    }
    if (output["OperationPreferences"] !== undefined) {
        contents.OperationPreferences = deserializeAws_queryStackSetOperationPreferences(output["OperationPreferences"], context);
    }
    return contents;
};
const deserializeAws_queryStackSetSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackSetSummary(entry, context);
    });
};
const deserializeAws_queryStackSetSummary = (output, context) => {
    const contents = {
        StackSetName: undefined,
        StackSetId: undefined,
        Description: undefined,
        Status: undefined,
        AutoDeployment: undefined,
        PermissionModel: undefined,
        DriftStatus: undefined,
        LastDriftCheckTimestamp: undefined,
        ManagedExecution: undefined,
    };
    if (output["StackSetName"] !== undefined) {
        contents.StackSetName = __expectString(output["StackSetName"]);
    }
    if (output["StackSetId"] !== undefined) {
        contents.StackSetId = __expectString(output["StackSetId"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["Status"] !== undefined) {
        contents.Status = __expectString(output["Status"]);
    }
    if (output["AutoDeployment"] !== undefined) {
        contents.AutoDeployment = deserializeAws_queryAutoDeployment(output["AutoDeployment"], context);
    }
    if (output["PermissionModel"] !== undefined) {
        contents.PermissionModel = __expectString(output["PermissionModel"]);
    }
    if (output["DriftStatus"] !== undefined) {
        contents.DriftStatus = __expectString(output["DriftStatus"]);
    }
    if (output["LastDriftCheckTimestamp"] !== undefined) {
        contents.LastDriftCheckTimestamp = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastDriftCheckTimestamp"]));
    }
    if (output["ManagedExecution"] !== undefined) {
        contents.ManagedExecution = deserializeAws_queryManagedExecution(output["ManagedExecution"], context);
    }
    return contents;
};
const deserializeAws_queryStackSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryStackSummary(entry, context);
    });
};
const deserializeAws_queryStackSummary = (output, context) => {
    const contents = {
        StackId: undefined,
        StackName: undefined,
        TemplateDescription: undefined,
        CreationTime: undefined,
        LastUpdatedTime: undefined,
        DeletionTime: undefined,
        StackStatus: undefined,
        StackStatusReason: undefined,
        ParentId: undefined,
        RootId: undefined,
        DriftInformation: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    if (output["StackName"] !== undefined) {
        contents.StackName = __expectString(output["StackName"]);
    }
    if (output["TemplateDescription"] !== undefined) {
        contents.TemplateDescription = __expectString(output["TemplateDescription"]);
    }
    if (output["CreationTime"] !== undefined) {
        contents.CreationTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["CreationTime"]));
    }
    if (output["LastUpdatedTime"] !== undefined) {
        contents.LastUpdatedTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdatedTime"]));
    }
    if (output["DeletionTime"] !== undefined) {
        contents.DeletionTime = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["DeletionTime"]));
    }
    if (output["StackStatus"] !== undefined) {
        contents.StackStatus = __expectString(output["StackStatus"]);
    }
    if (output["StackStatusReason"] !== undefined) {
        contents.StackStatusReason = __expectString(output["StackStatusReason"]);
    }
    if (output["ParentId"] !== undefined) {
        contents.ParentId = __expectString(output["ParentId"]);
    }
    if (output["RootId"] !== undefined) {
        contents.RootId = __expectString(output["RootId"]);
    }
    if (output["DriftInformation"] !== undefined) {
        contents.DriftInformation = deserializeAws_queryStackDriftInformationSummary(output["DriftInformation"], context);
    }
    return contents;
};
const deserializeAws_queryStageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryStaleRequestException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryStopStackSetOperationOutput = (output, context) => {
    const contents = {};
    return contents;
};
const deserializeAws_querySupportedMajorVersions = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __strictParseInt32(entry);
    });
};
const deserializeAws_queryTag = (output, context) => {
    const contents = {
        Key: undefined,
        Value: undefined,
    };
    if (output["Key"] !== undefined) {
        contents.Key = __expectString(output["Key"]);
    }
    if (output["Value"] !== undefined) {
        contents.Value = __expectString(output["Value"]);
    }
    return contents;
};
const deserializeAws_queryTags = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTag(entry, context);
    });
};
const deserializeAws_queryTemplateParameter = (output, context) => {
    const contents = {
        ParameterKey: undefined,
        DefaultValue: undefined,
        NoEcho: undefined,
        Description: undefined,
    };
    if (output["ParameterKey"] !== undefined) {
        contents.ParameterKey = __expectString(output["ParameterKey"]);
    }
    if (output["DefaultValue"] !== undefined) {
        contents.DefaultValue = __expectString(output["DefaultValue"]);
    }
    if (output["NoEcho"] !== undefined) {
        contents.NoEcho = __parseBoolean(output["NoEcho"]);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    return contents;
};
const deserializeAws_queryTemplateParameters = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTemplateParameter(entry, context);
    });
};
const deserializeAws_queryTestTypeOutput = (output, context) => {
    const contents = {
        TypeVersionArn: undefined,
    };
    if (output["TypeVersionArn"] !== undefined) {
        contents.TypeVersionArn = __expectString(output["TypeVersionArn"]);
    }
    return contents;
};
const deserializeAws_queryTokenAlreadyExistsException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryTransformsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __expectString(entry);
    });
};
const deserializeAws_queryTypeConfigurationDetails = (output, context) => {
    const contents = {
        Arn: undefined,
        Alias: undefined,
        Configuration: undefined,
        LastUpdated: undefined,
        TypeArn: undefined,
        TypeName: undefined,
        IsDefaultConfiguration: undefined,
    };
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["Alias"] !== undefined) {
        contents.Alias = __expectString(output["Alias"]);
    }
    if (output["Configuration"] !== undefined) {
        contents.Configuration = __expectString(output["Configuration"]);
    }
    if (output["LastUpdated"] !== undefined) {
        contents.LastUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdated"]));
    }
    if (output["TypeArn"] !== undefined) {
        contents.TypeArn = __expectString(output["TypeArn"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    if (output["IsDefaultConfiguration"] !== undefined) {
        contents.IsDefaultConfiguration = __parseBoolean(output["IsDefaultConfiguration"]);
    }
    return contents;
};
const deserializeAws_queryTypeConfigurationDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTypeConfigurationDetails(entry, context);
    });
};
const deserializeAws_queryTypeConfigurationIdentifier = (output, context) => {
    const contents = {
        TypeArn: undefined,
        TypeConfigurationAlias: undefined,
        TypeConfigurationArn: undefined,
        Type: undefined,
        TypeName: undefined,
    };
    if (output["TypeArn"] !== undefined) {
        contents.TypeArn = __expectString(output["TypeArn"]);
    }
    if (output["TypeConfigurationAlias"] !== undefined) {
        contents.TypeConfigurationAlias = __expectString(output["TypeConfigurationAlias"]);
    }
    if (output["TypeConfigurationArn"] !== undefined) {
        contents.TypeConfigurationArn = __expectString(output["TypeConfigurationArn"]);
    }
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    return contents;
};
const deserializeAws_queryTypeConfigurationNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryTypeNotFoundException = (output, context) => {
    const contents = {
        Message: undefined,
    };
    if (output["Message"] !== undefined) {
        contents.Message = __expectString(output["Message"]);
    }
    return contents;
};
const deserializeAws_queryTypeSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTypeSummary(entry, context);
    });
};
const deserializeAws_queryTypeSummary = (output, context) => {
    const contents = {
        Type: undefined,
        TypeName: undefined,
        DefaultVersionId: undefined,
        TypeArn: undefined,
        LastUpdated: undefined,
        Description: undefined,
        PublisherId: undefined,
        OriginalTypeName: undefined,
        PublicVersionNumber: undefined,
        LatestPublicVersion: undefined,
        PublisherIdentity: undefined,
        PublisherName: undefined,
        IsActivated: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    if (output["DefaultVersionId"] !== undefined) {
        contents.DefaultVersionId = __expectString(output["DefaultVersionId"]);
    }
    if (output["TypeArn"] !== undefined) {
        contents.TypeArn = __expectString(output["TypeArn"]);
    }
    if (output["LastUpdated"] !== undefined) {
        contents.LastUpdated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["LastUpdated"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["PublisherId"] !== undefined) {
        contents.PublisherId = __expectString(output["PublisherId"]);
    }
    if (output["OriginalTypeName"] !== undefined) {
        contents.OriginalTypeName = __expectString(output["OriginalTypeName"]);
    }
    if (output["PublicVersionNumber"] !== undefined) {
        contents.PublicVersionNumber = __expectString(output["PublicVersionNumber"]);
    }
    if (output["LatestPublicVersion"] !== undefined) {
        contents.LatestPublicVersion = __expectString(output["LatestPublicVersion"]);
    }
    if (output["PublisherIdentity"] !== undefined) {
        contents.PublisherIdentity = __expectString(output["PublisherIdentity"]);
    }
    if (output["PublisherName"] !== undefined) {
        contents.PublisherName = __expectString(output["PublisherName"]);
    }
    if (output["IsActivated"] !== undefined) {
        contents.IsActivated = __parseBoolean(output["IsActivated"]);
    }
    return contents;
};
const deserializeAws_queryTypeVersionSummaries = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTypeVersionSummary(entry, context);
    });
};
const deserializeAws_queryTypeVersionSummary = (output, context) => {
    const contents = {
        Type: undefined,
        TypeName: undefined,
        VersionId: undefined,
        IsDefaultVersion: undefined,
        Arn: undefined,
        TimeCreated: undefined,
        Description: undefined,
        PublicVersionNumber: undefined,
    };
    if (output["Type"] !== undefined) {
        contents.Type = __expectString(output["Type"]);
    }
    if (output["TypeName"] !== undefined) {
        contents.TypeName = __expectString(output["TypeName"]);
    }
    if (output["VersionId"] !== undefined) {
        contents.VersionId = __expectString(output["VersionId"]);
    }
    if (output["IsDefaultVersion"] !== undefined) {
        contents.IsDefaultVersion = __parseBoolean(output["IsDefaultVersion"]);
    }
    if (output["Arn"] !== undefined) {
        contents.Arn = __expectString(output["Arn"]);
    }
    if (output["TimeCreated"] !== undefined) {
        contents.TimeCreated = __expectNonNull(__parseRfc3339DateTimeWithOffset(output["TimeCreated"]));
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output["PublicVersionNumber"] !== undefined) {
        contents.PublicVersionNumber = __expectString(output["PublicVersionNumber"]);
    }
    return contents;
};
const deserializeAws_queryUnprocessedTypeConfigurations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return deserializeAws_queryTypeConfigurationIdentifier(entry, context);
    });
};
const deserializeAws_queryUpdateStackInstancesOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryUpdateStackOutput = (output, context) => {
    const contents = {
        StackId: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    return contents;
};
const deserializeAws_queryUpdateStackSetOutput = (output, context) => {
    const contents = {
        OperationId: undefined,
    };
    if (output["OperationId"] !== undefined) {
        contents.OperationId = __expectString(output["OperationId"]);
    }
    return contents;
};
const deserializeAws_queryUpdateTerminationProtectionOutput = (output, context) => {
    const contents = {
        StackId: undefined,
    };
    if (output["StackId"] !== undefined) {
        contents.StackId = __expectString(output["StackId"]);
    }
    return contents;
};
const deserializeAws_queryValidateTemplateOutput = (output, context) => {
    const contents = {
        Parameters: undefined,
        Description: undefined,
        Capabilities: undefined,
        CapabilitiesReason: undefined,
        DeclaredTransforms: undefined,
    };
    if (output.Parameters === "") {
        contents.Parameters = [];
    }
    else if (output["Parameters"] !== undefined && output["Parameters"]["member"] !== undefined) {
        contents.Parameters = deserializeAws_queryTemplateParameters(__getArrayIfSingleItem(output["Parameters"]["member"]), context);
    }
    if (output["Description"] !== undefined) {
        contents.Description = __expectString(output["Description"]);
    }
    if (output.Capabilities === "") {
        contents.Capabilities = [];
    }
    else if (output["Capabilities"] !== undefined && output["Capabilities"]["member"] !== undefined) {
        contents.Capabilities = deserializeAws_queryCapabilities(__getArrayIfSingleItem(output["Capabilities"]["member"]), context);
    }
    if (output["CapabilitiesReason"] !== undefined) {
        contents.CapabilitiesReason = __expectString(output["CapabilitiesReason"]);
    }
    if (output.DeclaredTransforms === "") {
        contents.DeclaredTransforms = [];
    }
    else if (output["DeclaredTransforms"] !== undefined && output["DeclaredTransforms"]["member"] !== undefined) {
        contents.DeclaredTransforms = deserializeAws_queryTransformsList(__getArrayIfSingleItem(output["DeclaredTransforms"]["member"]), context);
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (resolvedHostname !== undefined) {
        contents.hostname = resolvedHostname;
    }
    if (body !== undefined) {
        contents.body = body;
    }
    return new __HttpRequest(contents);
};
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        const parser = new XMLParser({
            attributeNamePrefix: "",
            htmlEntities: true,
            ignoreAttributes: false,
            ignoreDeclaration: true,
            parseTagValue: false,
            trimValues: false,
            tagValueProcessor: (_, val) => (val.trim() === "" && val.includes("\n") ? "" : undefined),
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
            parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
            delete parsedObjToReturn[textNodeName];
        }
        return __getValueFromTextNode(parsedObjToReturn);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
    }
    return value;
};
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => __extendedEncodeURIComponent(key) + "=" + __extendedEncodeURIComponent(value))
    .join("&");
const loadQueryErrorCode = (output, data) => {
    if (data.Error?.Code !== undefined) {
        return data.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};
