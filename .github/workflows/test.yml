name: 'build-test'

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'
  workflow_dispatch:


permissions:
  id-token: write

jobs:
  build:
    env:
      AWS_REGION: us-west-2
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        check-latest: true

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        run_install: |
          - recursive: true
            args: [--no-frozen-lockfile, --strict-peer-dependencies]

    - uses: oven-sh/setup-bun@v2

    - name: build
      run: bun run --bun build && bun run --bun lint && bun run --bun package

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - uses: actions/checkout@v4
    - uses: ./
      id: stack-status
      with:
        stack-name: CDKToolkit

    - name: 'test'
      run: echo ${{ steps.stack-status.outputs.status }}

  test:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-west-2
    steps:

    - name: generate timestamp
      id: gen-timestamp
      run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v4

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: ${{ env.AWS_REGION }}

    - name: Use Node.js 22.x
      uses: actions/setup-node@v4
      with:
        node-version: 22.x
        check-latest: true

    - uses: pnpm/action-setup@v4
      name: Install pnpm
      with:
        run_install: |
          - recursive: true
            args: [--no-frozen-lockfile, --strict-peer-dependencies]
          - args: [--global, aws-cdk]

    - name: create stack
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: test
      run: cdk deploy -c timestamp=${TIMESTAMP} -c region=us-east-1

    - uses: ./
      id: stack-status
      with:
        stack-name: aws-cloudformation-stack-status-checker-test-${{ steps.gen-timestamp.outputs.timestamp }}
        region: us-east-1

    - name: 'test'
      run: echo ${{ steps.stack-status.outputs.status }}

    - name: Remove for testing stack
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: test
      run: cdk destroy -c name="${TIMESTAMP}" -c region=us-east-1 -f
